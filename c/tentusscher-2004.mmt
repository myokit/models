[[model]]
name: tentusscher-2004
version: 20230202
mmt_authors: Michael Clerx
display_name: Ten Tusscher et al., 2004
desc: """
    The 2004 model of the human ventricular myocyte AP by ten Tusscher et al.
    [1].

    The model contains a switch for endo, epi and mid-myocardial modes.

    This implementation is based on the CellML version on PMR [2].

    [1] Ten Tusscher, K. H. W. J., Noble, D., Noble, P. J., Panfilov, A.
        V. (2004). A model for human ventricular tissue. American Journal of
        Physiology. Heart and Circulatory Physiology, 286(4), H1573-H1589.
        https://doi.org/10.1152/ajpheart.00794.2003

    [2] https://models.physiomeproject.org/e/80c

    ---------------------------------------------------------------------------

    A Model For Human Ventricular Tissue

    Catherine Lloyd
    Auckland Bioengineering Institute, The University of Auckland

    Model Status

    This variant of the model was created by Penny Noble of Oxford University,
    and represents the parameters given for the epicardial cell variant in Ten
    Tusscher et al. 2004. A stimulus protocol component has been added to the
    model to allow simulation of trains of action potentials. This file is
    known to run in OpenCell and COR to recreate the published results. The
    units have been checked and they are consistent.

    Model Structure

    ABSTRACT: The experimental and clinical possibilities for studying cardiac
    arrhythmias in human ventricular myocardium are very limited. Therefore,
    the use of alternative methods such as computer simulations is of great
    importance. In this article we introduce a mathematical model of the action
    potential of human ventricular cells that, while including a high level of
    electrophysiological detail, is computationally cost-effective enough to be
    applied in large-scale spatial simulations for the study of reentrant
    arrhythmias. The model is based on recent experimental data on most of the
    major ionic currents: the fast sodium, L-type calcium, transient outward,
    rapid and slow delayed rectifier, and inward rectifier currents. The model
    includes a basic calcium dynamics, allowing for the realistic modeling of
    calcium transients, calcium current inactivation, and the contraction
    staircase. We are able to reproduce human epicardial, endocardial, and M
    cell action potentials and show that differences can be explained by
    differences in the transient outward and slow delayed rectifier currents.
    Our model reproduces the experimentally observed data on action potential
    duration restitution, which is an important characteristic for reentrant
    arrhythmias. The conduction velocity restitution of our model is broader
    than in other models and agrees better with available data. Finally, we
    model the dynamics of spiral wave rotation in a two-dimensional sheet of
    human ventricular tissue and show that the spiral wave follows a complex
    meandering pattern and has a period of 265 ms. We conclude that the
    proposed model reproduces a variety of electrophysiological behaviors and
    provides a basis for studies of reentrant arrhythmias in human ventricular
    tissue.

    The original paper reference is cited below:

    A model for human ventricular tissue, K.H.W.J. ten Tusscher, D. Noble, P.J.
    Noble, and A.V. Panfilov, 2004,
    American Journal of Physiology, 286, H1573-H1589. PubMed ID: 14656705
    """
# Initial values (ordered as in the original code)
membrane.V   = -86.2
calcium.Cai  = 0.0002
calcium.CaSR = 0.2
sodium.Nai   = 11.6
potassium.Ki = 138.3
ina.m        = 0
ina.h        = 0.75
ina.j        = 0.75
ikr.xr1      = 0
ikr.xr2      = 1
iks.xs       = 0
ito.r        = 0
ito.s        = 1
ical.d       = 0
ical.f       = 1
ical.fCa     = 1
jrel.g       = 1

#
# Simulator variables
#
[engine]
pace = 0 bind pace
time = 0 [ms] bind time
    in [ms]

#
# Membrane potential
#
[membrane]
dot(V) = -(i_ion + stimulus.i_stim + i_diff)
    in [mV]
    label membrane_potential
i_ion = (+ ina.INa
         + ik1.IK1
         + ikr.IKr
         + iks.IKs
         + ito.Ito
         + ical.ICaL
         + inak.INaK
         + inaca.INaCa
         + ipca.IpCa
         + ipk.IpK
         + icab.ICab
         + inab.INab
        )
    in [A/F]
i_diff = 0 [A/F]
    in [A/F]
    bind diffusion_current

#
# Stimulus current
#
[stimulus]
i_stim = engine.pace * amplitude
    in [A/F]
amplitude = -52 [A/F]
    in [A/F]

#
# Cell parameters
#
[cell]
type = 1
    desc: The type of cell: endocardial = 0, epicardial = 1, mid-myocardial = 2
Vc = 16404 [um^3]
    in [um^3]
    desc: Bulk cytoplasm volume
Vsr = 1094 [um^3]
    in [um^3]
    desc: Sarcoplasmic reticulum volume
Cm = 185 [pF]
    in [pF]
    desc: Cell capacitance

#
# Physical constants
#
[phys]
F = 96.485 [C/mmol]
    in [C/mmol]
R = 8.314 [J/mol/K]
    in [J/mol/K]
T = 310 [K]
    in [K]
RTF = R * T / F
    in [mV]
FRT = F / (R * T)
    in [1/mV]
FFRT = F * FRT
    in [C/mmol/mV]

#
# Fast sodium current
#
[ina]
use membrane.V, nernst.ENa
INa = gNa * m ^ 3 * h * j * (V - ENa)
    in [A/F]
gNa = 14.838 [mS/uF]
    in [mS/uF]
dot(m) = (inf - m) / tau
    inf = 1 / (1 + exp((-56.86 [mV] - V) / 9.03 [mV])) ^ 2
    tau = 1 [ms] * alpha * beta
        in [ms]
    alpha = 1 / (1 + exp((-60 [mV] - V) / 5 [mV]))
    beta = 0.1 / (1 + exp((V + 35 [mV]) / 5 [mV])) + 0.1 / (1 + exp((V - 50 [mV]) / 200 [mV]))
dot(h) = (inf - h) / tau
    inf = 1 / (1 + exp((V + 71.55 [mV]) / 7.43 [mV])) ^ 2
    tau = 1 / (alpha + beta)
        in [ms]
    alpha = if(V < -40 [mV],
                 0.057 [mS/uF] * exp(-(V + 80 [mV]) / 6.8 [mV]),
                 0 [mS/uF])
        in [1/ms]
    beta = if(V < -40 [mV],
                2.7 [mS/uF] * exp(0.079 [1/mV] * V) + 310000 [mS/uF] * exp(0.3485 [1/mV] * V),
                0.77 [mS/uF] / (0.13 * (1 + exp((V + 10.66 [mV]) / -11.1 [mV]))))
        in [1/ms]
dot(j) = (inf - j) / tau
    inf = 1 / (1 + exp((V + 71.55 [mV]) / 7.43 [mV])) ^ 2
    tau = 1 / (alpha + beta)
        in [ms]
    alpha = if(V < -40 [mV],
               (-25428 [mS/uF] * exp(0.2444 [1/mV] * V) - 6.948e-6 [mS/uF] * exp(-0.04391 [1/mV] * V)) * (V + 37.78 [mV]) / 1 [mV] / (1 + exp(0.311 [1/mV] * (V + 79.23 [mV]))),
               0 [mS/uF])
        in [1/ms]
    beta = if(V < -40 [mV],
              0.02424 [mS/uF] * exp(-0.01052 [1/mV] * V) / (1 + exp(-0.1378 [1/mV] * (V + 40.14 [mV]))),
              0.6 [mS/uF] * exp(0.057 [1/mV] * V) / (1 + exp(-0.1 [1/mV] * (V + 32 [mV]))))
        in [1/ms]

#
# Inward rectifier potassium current
#
[ik1]
use membrane.V, nernst.EK
IK1 = gK1 * inf * (V - EK)
    in [A/F]
gK1 = 5.405 [mS/uF] * sqrt(extra.Ko / 5.4 [mM])
    in [mS/uF]
inf = alpha / (alpha + beta)
    alpha = 0.1 [1/ms] / (1 + exp(0.06 [1/mV] * (V - EK - 200 [mV])))
        in [1/ms]
    beta = (3 [1/ms] * exp(0.0002 [1/mV] * (V - EK + 100 [mV])) + 1 [1/ms] * exp(0.1 [1/mV] * (V - EK - 10 [mV]))) / (1 + exp(-0.5 [1/mV] * (V - EK)))
        in [1/ms]

#
# Fast time-dependent potassium current
#
[ikr]
use membrane.V, nernst.EK
IKr = gKr * xr1 * xr2 * (V - EK)
    in [A/F]
gKr = 0.096 [mS/uF] * sqrt(extra.Ko / 5.4 [mM])
    in [mS/uF]
dot(xr1) = (inf - xr1) / tau
    inf = 1 / (1 + exp((-26 [mV] - V) / 7 [mV]))
    tau = 1 [ms] * alpha * beta
        in [ms]
    alpha = 450 / (1 + exp((-45 [mV] - V) / 10 [mV]))
    beta = 6 / (1 + exp((V + 30 [mV]) / 11.5 [mV]))
dot(xr2) = (inf - xr2) / tau
    inf = 1 / (1 + exp((V + 88 [mV]) / 24 [mV]))
    tau = 1 [ms] * alpha * beta
        in [ms]
    alpha = 3 / (1 + exp((-60 [mV] - V) / 20 [mV]))
    beta = 1.12 / (1 + exp((V - 60 [mV]) / 20 [mV]))

#
# Slow time-dependent potassium current
#
[iks]
use membrane.V, nernst.EKs
IKs = gKs * xs ^ 2 * (V - EKs)
    in [A/F]
gKs = if(cell.type != 2,
         0.245 [mS/uF],      # Endo and epicardial
         0.062 [mS/uF]       # Mid-myocardial
        )
    in [mS/uF]
dot(xs) = (inf - xs) / tau
    inf = 1 / (1 + exp((-5 [mV] - V) / 14 [mV]))
    tau = 1 [ms] * alpha * beta
        in [ms]
    alpha = 1100 / sqrt(1 + exp((-10 [mV] - V) / 6 [mV]))
    beta = 1 / (1 + exp((V - 60 [mV]) / 20 [mV]))

#
# Transient outward current
#
[ito]
use membrane.V, nernst.EK
Ito = gto * r * s * (V - EK)
    in [A/F]
gto = if(cell.type == 0,
         0.073 [mS/uF],      # Endocardial
         0.294 [mS/uF]       # Epicardial and mid-myocardial
        )
    in [mS/uF]
dot(r) = (inf - r) / tau
    inf = 1 / (1 + exp((20 [mV] - V) / 6 [mV]))
    tau = 9.5 [ms] * exp(-(V + 40 [mV]) ^ 2 / 1800 [mV^2]) + 0.8 [ms]
        in [ms]
dot(s) = (inf - s) / tau
    inf = if(cell.type == 0,
             1 / (1 + exp((V + 28 [mV]) / 5 [mV])),     # Endocardial
             1 / (1 + exp((V + 20 [mV]) / 5 [mV]))      # Epicardial and mid-myocardial
            )
    tau = if(cell.type == 0,
             # Endocardial:
             1000 [ms] * exp(-(V + 67 [mV]) ^ 2 / 1000 [mV^2]) + 8 [ms],
             # Epicardial and mid-myocardial:
             85 [ms] * exp(-(V + 45 [mV]) ^ 2 / 320 [mV^2]) + 5 [ms] / (1 + exp((V - 20 [mV]) / 5 [mV])) + 3 [ms]
            )
        in [ms]

#
# L-type calcium current
#
[ical]
use membrane.V
use phys.FRT, phys.FFRT
use extra.Cao, calcium.Cai
ICaL = gCaL * d * f * fCa * 4 * V * FFRT * (Cai * exp(2 * V * FRT) - 0.341 * Cao) / (exp(2 * V * FRT) - 1)
    in [A/F]
    label ICaL
gCaL = 0.175 [L/F/s]
    in [L/F/s]
dot(d) = (inf - d) / tau
    inf = 1 / (1 + exp((-5 [mV] - V) / 7.5 [mV]))
    tau = 1 [ms] * (alpha * beta + gamma)
        in [ms]
    alpha = 1.4 / (1 + exp((-35 [mV] - V) / 13 [mV])) + 0.25
    beta = 1.4 / (1 + exp((V + 5 [mV]) / 5 [mV]))
    gamma = 1 / (1 + exp((50 [mV] - V) / 20 [mV]))
dot(f) = (inf - f) / tau
    inf = 1 / (1 + exp((V + 20 [mV]) / 7 [mV]))
    tau = 1125 [ms] * exp(-(V + 27 [mV]) ^ 2 / 240 [mV^2]) + 80 [ms] + 165 [ms] / (1 + exp((25 [mV] - V) / 10 [mV]))
        in [ms]
dot(fCa) = if(inf > fCa and V > -60 [mV], 0 [mS/uF], (inf - fCa) / tau)
    inf = (alpha + beta + gamma + 0.23) / 1.46
    alpha = 1 / (1 + (Cai / 0.000325 [mM]) ^ 8)
    beta = 0.1 / (1 + exp((Cai - 0.0005 [mM]) / 0.0001 [mM]))
    gamma = 0.2 / (1 + exp((Cai - 0.00075 [mM]) / 0.0008 [mM]))
    tau = 2 [ms]
        in [ms]

#
# Sodium-potassium pump
#
[inak]
use membrane.V, phys.FRT
use extra.Ko, sodium.Nai
INaK = P_NaK * Ko / (Ko + K_mk) * Nai / (Nai + K_mNa) / (1 + 0.1245 * exp(-0.1 * V * FRT) + 0.0353 * exp(-V * FRT))
    in [A/F]
P_NaK = 1.362 [A/F]
    in [A/F]
K_mNa = 40 [mM]
    in [mM]
K_mk = 1 [mM]
    in [mM]

#
# Sodium-calcium exchanger
#
[inaca]
use membrane.V, phys.FRT
use extra.Nao, extra.Cao
use sodium.Nai, calcium.Cai
INaCa = (K_NaCa
         * (exp(gamma * V * FRT) * Nai ^ 3 * Cao - exp((gamma - 1) * V * FRT) * Nao ^ 3 * Cai * alpha)
         / ((Km_Nai ^ 3 + Nao ^ 3) * (Km_Ca + Cao) * (1 + K_sat * exp((gamma - 1) * V * FRT))))
    in [A/F]
K_NaCa = 1000 [A/F]
    in [A/F]
Km_Ca = 1.38 [mM]
    in [mM]
Km_Nai = 87.5 [mM]
    in [mM]
K_sat = 0.1
alpha = 2.5
gamma = 0.35

#
# Calcium pump
#
[ipca]
use calcium.Cai
IpCa = gpCa * Cai / (Cai + KpCa)
    in [A/F]
gpCa = 0.825 [A/F]
    in [A/F]
KpCa = 0.0005 [mM]
    in [mM]

#
# Potassiump pump
#
[ipk]
use membrane.V, nernst.EK
IpK = gpK * (V - EK) / (1 + exp((25 [mV] - V) / 5.98 [mV]))
    in [A/F]
gpK = 0.0146 [mS/uF]
    in [mS/uF]

#
# Background calcium current
#
[icab]
use membrane.V, nernst.ECa
ICab = gCab * (V - ECa)
    in [A/F]
gCab = 0.000592 [mS/uF]
    in [mS/uF]

#
# Background sodium current
#
[inab]
use membrane.V, nernst.ENa
INab = gNab * (V - ENa)
    in [A/F]
gNab = 0.00029 [mS/uF]
    in [mS/uF]

#
# External concentrations
#
[extra]
Cao = 2 [mM]
    in [mM]
Nao = 140 [mM]
    in [mM]
Ko = 5.4 [mM]
    in [mM]

#
# Nernst/Reversal potentials
#
[nernst]
use extra.Cao, calcium.Cai
use extra.Nao, sodium.Nai
use extra.Ko, potassium.Ki
use phys.RTF
ECa = RTF * log(Cao / Cai) * 0.5
    in [mV]
ENa = RTF * log(Nao / Nai)
    in [mV]
EK = RTF * log(Ko / Ki)
    in [mV]
EKs = RTF * log((Ko + P_kna * Nao) / (Ki + P_kna * Nai))
    in [mV]
P_kna = 0.03

#
# Calcium release from the SR (RyR)
#
[jrel]
use membrane.V
use calcium.Cai, calcium.CaSR
Jrel = (a * CaSR ^ 2 / (b ^ 2 + CaSR ^ 2) + c) * ical.d * g
    in [mM/ms]
a = 0.016464 [mM/ms]
    in [mM/ms]
b = 0.25 [mM]
    in [mM]
c = 0.008232 [mM/ms]
    in [mM/ms]
dot(g) = if(inf > g and V > -60 [mV], 0 [mS/uF], (inf - g) / tau)
    inf = if(Cai < 0.00035 [mM],
               1 / (1 + (Cai / 0.00035 [mM]) ^ 6),
               1 / (1 + (Cai / 0.00035 [mM]) ^ 16))
    tau = 2 [ms]
        in [ms]

#
# Leak from the SR
#
[jleak]
use calcium.Cai, calcium.CaSR
Jleak = Vleak * (CaSR - Cai)
    in [mM/ms]
Vleak = 8e-5 [mS/uF]
    in [mS/uF]

#
# Calcium uptake into the SR (SERCA)
#
[jup]
use calcium.Cai
Jup = Vmax_up / (1 + K_up ^ 2 / Cai ^ 2)
    in [mM/ms]
Vmax_up = 0.000425 [mM/ms]
    in [mM/ms]
K_up = 0.00025 [mM]
    in [mM]

#
# Calcium dynamics
#
[calcium]
use jup.Jup, jrel.Jrel, jleak.Jleak
use phys.F, cell.Cm, cell.Vc, cell.Vsr
# Free calcium in cytosol and SR
dot(Cai) = ddt_Cai_total * f_JCai_free
    in [mM]
dot(CaSR) = ddt_CaSR_total * f_JCaSR_free
    in [mM]
# Derivative of total calcium concentrations (free + buffered)
ddt_Cai_total = -(ical.ICaL + icab.ICab + ipca.IpCa - 2 * inaca.INaCa) / (2 * Vc * F) * Cm + Jleak - Jup + Jrel
    in [mM/ms]
ddt_CaSR_total = Vc / Vsr * (Jup - (Jrel + Jleak))
    in [mM/ms]
# Conversion factors from d/dt total to d/dt free
f_JCai_free = 1 / (1 + Buf_c * K_buf_c / (Cai + K_buf_c) ^ 2)
f_JCaSR_free = 1 / (1 + Buf_SR * K_buf_SR / (CaSR + K_buf_SR) ^ 2)
# Buffering: Ca_buffered = Ca_i * Buf_c / (Ca_i + K_bufc)
Buf_c = 0.15 [mM]
    in [mM]
Buf_SR = 10 [mM]
    in [mM]
K_buf_c = 0.001 [mM]
    in [mM]
K_buf_SR = 0.3 [mM]
    in [mM]

#
# Sodium dynamics
#
[sodium]
use phys.F, cell.Cm, cell.Vc
dot(Nai) = -INa_total * Cm / (Vc * F)
    in [mM]
INa_total = ina.INa + inab.INab + 3 * inak.INaK + 3 * inaca.INaCa
    in [A/F]

#
# Potassium dynamics
#
[potassium]
use phys.F, cell.Cm, cell.Vc
dot(Ki) = -IK_total * Cm / (Vc * F)
    in [mM]
IK_total = ik1.IK1 + ito.Ito + ikr.IKr + iks.IKs + ipk.IpK + stimulus.i_stim - 2 * inak.INaK
    in [A/F]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      10.0     1.0      1000.0   0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Display the results
plt.figure()
plt.xlabel('Time (ms)')
plt.ylabel('Membrane potential (mV)')
plt.plot(d.time(), d['membrane.V'])
plt.show()

