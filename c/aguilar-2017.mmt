[[model]]
name: aguilar-2017
version: 20250505
mmt_authors: Michael Clerx
display_name: Aguilar et al., 2017
desc: """
    Model of the human atrial action potential by Aguilar et al. [1], based on
    the model by Courtemanche et al. [2] and including the IKACh current
    described in [3].

    This Myokit implementation is based on the CellML code for the Courtemanche
    model [4], but with IKur and IKAch equations from [1] and [2] added in. No
    source model was available to very against numerically.

    The stimulus was set to 0.5 [ms] and approximately twice the threshold
    value for depolarisation.

    [1] Aguilar, M., Feng, J., Vigmond, E. J., Comtois, P., & Nattel, S. (2017)
        Rate-Dependent Role of IKur in Human Atrial Repolarization and Atrial
        Fibrillation Maintenance. Biophysical Journal, 112, 1997-2010.
        https://doi.org/10.1016/j.bpj.2017.03.022

    [2] Courtemanche, M., Ramirez, R. J., & Nattel, S. (1998) Ionic mechanisms
        underlying human atrial action potential properties: insights from a
        mathematical model. American Journal of Physiology - Heart and
        Circulatory Physiology, 275, H301-H321.
        https://doi.org/10.1152/ajpheart.1998.275.1.H301

    [3] Kneller, J., Zou, R., Vigmond, E. J., Wang, Z., Leon, L. J., & Nattel,
        S. (2002) Cholinergic Atrial Fibrillation in a Computer Model of a
        Two-Dimensional Sheet of Canine Atrial Cells With Realistic Ionic
        Properties. Circulation Research, 90:e73-e87.
        https://doi.org/10.1161/01.RES.0000019783.88094.BA

    [4] https://models.cellml.org/exposure/0e03bbe01606be5811691f9d5de10b65

"""
# Initial values
membrane.V    = -8.19397146740068933e+01
sodium.Nai    =  1.38177113218043086e+01
potassium.Ki  =  1.36353603506576576e+02
calcium.Cai   =  1.23376366972299627e-04
calcium.CaUp  =  1.55115381746945680e+00
calcium.CaRel =  1.08093027837490507e+00
ina.m         =  2.56643247570756926e-03
ina.h         =  9.70255066883649708e-01
ina.j         =  9.81093665130521209e-01
ito.oa        =  2.91862810507574934e-02
ito.oi        =  9.99342030979937346e-01
ikur.ua       =  4.59154440052007232e-03
ikur.uif      =  9.84890717971652174e-01
ikur.uis      =  9.93585173893543949e-01
ikr.xr        =  8.47706187313255338e-04
iks.xs        =  1.86785834397122132e-02
ical.d        =  1.24334788012318544e-04
ical.f        =  9.51377200856966199e-01
ical.fCa      =  7.39239650726807640e-01
cajsr.u       = -1.08165645902988466e-30
cajsr.v       = 1.0
cajsr.w       =  9.99233500604581493e-01

#
# Membrane potential
#
# Page H303, equations 1-2 in [2]
# Page H317, equations 18-19 in [2]
#
[membrane]
dot(V) = -(I_ion + I_diff + stimulus.I_stim)
    in [mV]
    label membrane_potential
I_ion = (
        + ina.INa
        + ik1.IK1
        + ito.Ito
        + ikur.IKur
        + ikr.IKr
        + iks.IKs
        + ical.ICaL
        + ipca.IpCa
        + inak.INaK
        + inaca.INaCa
        + ib.IbNa
        + ib.IbCa
        + ikach.IKACh)
    in [A/F]
    label cellular_current
I_diff = 0 [A/F]
    in [A/F]
    bind diffusion_current

#
# Stimulus current
#
[stimulus]
I_stim = engine.pace * amplitude / geom.Cm
    in [A/F]
    label stimulus_current
amplitude = 2 * -4618 [pA]
    in [pA]

#
# Simulation variables
#
[engine]
time = 0 [ms]
    in [ms]
    bind time
pace = 0
    bind pace

#
# Physical constants
#
# Page H303, Table 1 in [2]
#
[phys]
R = 8.3143 [J/mol/K]
    in [J/mol/K]
    desc:
T = 310 [K]
    in [K]
    desc: Temperature
F = 96.4867 [C/mmol]
    in [C/mmol]
    desc: Faraday constant
RTF = R * T / F
    in [mV]
FRT = 1 / RTF
    in [1/mV]

#
# Cell dimensions
#
# Page H303, Table 1 in [2]
#
[geom]
Cm = 100 [pF]
    in [pF]
    label membrane_capacitance
V_cell = 20100 [um^3]
    in [um^3]
    desc: Cell volume
V_i = V_cell * 0.68
    in [um^3]
    desc: Intracellular volume
V_up = 0.0552 * V_cell
    in [um^3]
    desc: SR uptake compartment volume
V_rel = 0.0048 * V_cell
    in [um^3]
    desc: SR release compartment volume

#
# External ionic concentrations
#
# Page H303, Table 1 in [2]
#
[extra]
Ko = 5.4 [mM]
    in [mM]
    desc: Extracellular K+ concentration
Nao = 140 [mM]
    in [mM]
    desc: Extracellular Na+ concentration
Cao = 1.8 [mM]
    in [mM]
    desc: Extracellular Ca2+ concentration

#
# Temperature adjustments
#
# Page H303, Table 1 in [2]
#
[temp]
KQ10 = 3
    desc: Temperature scaling factor for IKur and Ito kinetics

#
# Intracellular Na+ concentration
#
# Page H317, Equation 21 in [2]
#
[sodium]
use phys.F, geom.V_i, geom.Cm
dot(Nai) = (-3 * inak.INaK - (3 * inaca.INaCa + ib.IbNa + ina.INa)) * Cm / (V_i * F)
    in [mM]
    label Na_i

#
# Intracellular K+ concentration
#
# Page H317, Equation 22 in [2]
#
[potassium]
use phys.F, geom.V_i, geom.Cm
dot(Ki) = (2 * inak.INaK - (ik1.IK1 + ito.Ito + ikur.IKur + ikr.IKr + iks.IKs + stimulus.I_stim)) * Cm / (geom.V_i * phys.F)
    in [mM]
    label K_i

#
# Intracellular Ca2+ concentrations
#
# Page H137, Equations 23-27 in [2]
#
[calcium]
use phys.F, geom.V_i, geom.V_up, geom.V_rel, geom.Cm
use ca_buffers.CMDN_max, ca_buffers.Km_CMDN
use ca_buffers.TRPN_max, ca_buffers.Km_TRPN
use ca_buffers.CSQN_max, ca_buffers.Km_CSQN
dot(Cai) = B1 / B2
    in [mM]
    label Ca_i
    B1 = (2 * inaca.INaCa - (ipca.IpCa + ical.ICaL + ib.IbCa)) * Cm / (2 * V_i * F) + (V_up * (cansr.I_up_leak - cansr.I_up) + cajsr.I_rel * V_rel) / V_i
        in [mM/ms]
    B2 = 1 + TRPN_max * Km_TRPN / (Cai + Km_TRPN) ^ 2 + CMDN_max * Km_CMDN / (Cai + Km_CMDN) ^ 2
dot(CaRel) = (itr.I_tr - cajsr.I_rel) * (1 + CSQN_max * Km_CSQN / (CaRel + Km_CSQN) ^ 2) ^ (-1)
    in [mM]
dot(CaUp) = cansr.I_up - (cansr.I_up_leak + itr.I_tr * V_rel / V_up)
    in [mM]

#
# Reversal potentials
# Page H317, Equation 28 in [2]
#
[nernst]
EK =  phys.RTF * log(extra.Ko / potassium.Ki)
    in [mV]
ENa = phys.RTF * log(extra.Nao / sodium.Nai)
    in [mV]
ECa = 0.5 * phys.RTF * log(extra.Cao / calcium.Cai)
    in [mV]

#
# Fast sodium current
#
# Page H303, Table 1 in [2]
# Page H304, Equation 3 in [2]
# Page H317-H318, Equations 29-34 in [2]
#
[ina]
use membrane.V
dot(m) = (inf - m) / tau
    alpha = if(V == -47.13 [mV],
            3.2 [1/ms], # Note that this is 0.32 * (1/0.1), so a l'hopital rule!
            0.32 [1/ms/mV] * (V + 47.13 [mV]) / (1 - exp(-0.1 [1/mV] * (V + 47.13 [mV]))))
        in [1/ms]
    beta = 0.08 [1/ms] * exp(-V / 11 [mV])
        in [1/ms]
    tau = 1 / (alpha + beta)
        in [ms]
    inf = alpha / (alpha + beta)
dot(h) = (inf - h) / tau
    alpha = if(V < -40 [mV],
            0.135 [1/ms] * exp((V + 80 [mV]) / -6.8 [mV]),
            0 [1/ms]
        )
        in [1/ms]
    beta = if(V < -40 [mV],
            3.56 [1/ms] * exp(0.079 [1/mV] * V) + 3.1e5 [1/ms] * exp(0.35 [1/mV] * V),
            1 / (0.13 [ms] * (1 + exp((V + 10.66 [mV]) / -11.1 [mV])))
        )
        in [1/ms]
    tau = 1 / (alpha + beta)
        in [ms]
    inf = alpha / (alpha + beta)
dot(j) = (inf - j) / tau
    alpha = if(V < -40 [mV],
            (-127140 [1/ms/mV] * exp(0.2444 [1/mV] * V) - 3.474e-5 [1/ms/mV] * exp(-0.04391 [1/mV] * V)) * (V + 37.78 [mV]) / (1 + exp(0.311 [1/mV] * (V + 79.23 [mV]))),
            0 [1/ms]
        )
        in [1/ms]
    beta = if(V < -40 [mV],
            0.1212 [1/ms] * exp(-0.01052 [1/mV] * V) / (1 + exp(-0.1378 [1/mV] * (V + 40.14 [mV]))),
            0.3 [1/ms] * exp(-2.535e-7 [1/mV] * V) / (1 + exp(-0.1 [1/mV] * (V + 32 [mV])))
        )
        in [1/ms]
    tau = 1 / (alpha + beta)
        in [ms]
    inf = alpha / (alpha + beta)
gNa = 7.8 [nS/pF]
    in [nS/pF]
    desc: Maximal INa conductance
INa = gNa * m^3 * h * j * (V - nernst.ENa)
    in [A/F]
    label I_Na

#
# Time independent potassium current
#
# Page H303, Table 1 in [2]
# Page H304, Equation 4 in [2]
# Page H318, Equation 35 in [2]
#
[ik1]
use membrane.V
gK1 = 0.09 [nS/pF]
    in [nS/pF]
IK1 = gK1 * (V - nernst.EK) / (1 + exp(0.07 [1/mV] * (V + 80 [mV])))
    in [A/F]
    label I_K1

#
# Transient outward potassium current
#
# Page H303, Table 1 in [2]
# Page H305, Equation 5 in [2]
# Page H318. Equations 36-40 in [2]
#
[ito]
use membrane.V
use temp.KQ10
dot(oa) = (inf - oa) / tau
    alpha = 0.65 [1/ms] / (exp((V + 10 [mV]) / -8.5 [mV]) + exp((V - 30 [mV]) / -59 [mV]))
        in [1/ms]
    beta = 0.65 [1/ms] / (2.5 + exp((V + 82 [mV]) / 17 [mV]))
        in [1/ms]
    tau = 1 / (alpha + beta) / KQ10
        in [ms]
    inf = 1 / (1 + exp((V + 20.47 [mV]) / -17.54 [mV]))
dot(oi) = (inf - oi) / tau
    alpha = 1 [1/ms] / (18.53 + exp((V + 113.7 [mV]) / 10.95 [mV]))
        in [1/ms]
    beta = 1 [1/ms] / (35.56 + exp((V + 1.26 [mV]) / -7.44 [mV]))
        in [1/ms]
    tau = 1 / (alpha + beta) / KQ10
        in [ms]
    inf = 1 / (1 + exp((V + 43.1 [mV]) / 5.3 [mV]))
gto = 0.1652 [nS/pF]
    in [nS/pF]
    desc: Maximal Ito conductance
Ito = gto * oa^3 * oi * (V - nernst.EK)
    in [A/F]
    label I_to

#
# Ultrarapid delayed rectifier K+ current
#
# New inactivation gates uif (fast) and uis (slow) from [1]
# Page H305, Equation 6 in [2]
# Page H318, Equations 41-46 in [2]
#
[ikur]
use membrane.V
use temp.KQ10
dot(ua) = (inf - ua) / tau
    tau = 1 / (alpha + beta) / KQ10
        in [ms]
        alpha = 0.65 [1/ms] / (exp((V + 10 [mV]) / -8.5 [mV]) + exp((V - 30 [mV]) / -59 [mV]))
            in [1/ms]
        beta = 0.65 [1/ms] / (2.5 + exp((V + 82 [mV]) / 17 [mV]))
            in [1/ms]
    inf = 1 / (1 + exp((V + 30.3 [mV]) / -9.6 [mV]))
dot(uif) = (inf - uif) / tau
    inf = 1 / (1 + exp((V - 35 [mV]) / 20 [mV]))
    tau = 800 [ms] * (2 - V / 40 [mV])
        in [ms]
dot(uis) = (inf - uis) / tau
    inf = 1 / (1 + exp((V + 5 [mV]) / 5 [mV]))
    tau = 5800 [ms] / (1 + exp((V + 80 [mV]) / -11 [mV]))
        in [ms]
gKur_base = 0.005 [nS/pF]
    in [nS/pF]
    label g_Kur
gKur = gKur_base * (1 + 10 / (1 + exp((V - 15 [mV]) / -13 [mV])))
    in [nS/pF]
IKur = gKur * ua^3 * uif * uis * (V - nernst.EK)
    in [A/F]
    label I_Kur

#
# Rapid delayed rectifier potassium current
#
# Page H303, Table 1 in [2]
# Page H306, Equation 7 in [2]
# Page H318, Equations 47-49 in [2]
#
[ikr]
use membrane.V
dot(xr) = (inf - xr) / tau
    tau = 1 / (alpha + beta)
        alpha = 0.0003 [1/ms/mV] * if(abs(V + 14.1 [mV]) < 1e-6 [mV],
                5 [mV],
                (V + 14.1 [mV]) / (1 - exp((V + 14.1 [mV]) / -5 [mV]))
            )
            in [1/ms]
        beta = 7.3898e-5 [1/ms/mV] * if(abs(V - 3.3328 [mV]) < 1e-7 [mV],
                5.1237 [mV],
                (V - 3.3328 [mV]) / (exp((V - 3.3328 [mV]) / 5.1237 [mV]) - 1)
            )
            in [1/ms]
        in [ms]
    inf = 1 / (1 + exp((V + 14.1 [mV]) / -6.5 [mV]))
gKr = 0.029411765 [nS/pF] # Extra digits 11765 from CellML file
    in [nS/pF]
    desc: Maximal IKr conductance
    label g_Kr
IKr = gKr * xr * (V - nernst.EK) / (1 + exp((V + 15 [mV]) / 22.4 [mV]))
    in [A/F]
    label I_Kr

#
# Slow delayed rectifier potassium current
#
# Page H303, Table 1 in [2]
# Page H306. Equation 8 in [2]
# Page H318-H319, Equations 50-52 in [2]
#
[iks]
use membrane.V
dot(xs) = (inf - xs) / tau
    tau = 0.5 / (alpha + beta)
        in [ms]
        alpha = 4e-5 [1/ms/mV] * if(abs(V - 19.9 [mV]) < 1e-6 [mV],
                17 [mV],
                (V - 19.9 [mV]) / (1 - exp((V - 19.9 [mV]) / -17 [mV]))
            )
            in [1/ms]
        beta = 3.5e-5 [1/ms/mV] * if(abs(V - 19.9 [mV]) < 1e-6 [mV],
                9 [mV],
                (V - 19.9 [mV]) / (exp((V - 19.9 [mV]) / 9 [mV]) - 1)
            )
            in [1/ms]
    inf = 1 / sqrt(1 + exp((V - 19.9 [mV]) / -12.7 [mV]))
gKs = 0.12941176 [nS/pF] # Extra digits 41176 from CellML model
    in [nS/pF]
    desc: Maximal IKs conductance
IKs = gKs * xs^2 * (V - nernst.EK)
    in [A/F]

#
# L-type Calcium current
#
# Page H303, Table 1 in [2]
# Page H306, Equation 9 in [2]
# Page H319, Equations 53-56 in [2]
#
[ical]
use membrane.V, calcium.Cai
dot(d) = (inf - d) / tau
    tau = if(abs(V + 10 [mV]) < 1e-6 [mV],
            1 / (6.24 [mV] * 2 * 0.035 [1/ms/mV]),
            (1 - exp((V + 10 [mV]) / -6.24 [mV])) / (0.035 [1/ms/mV] * (V + 10 [mV]) * (1 + exp((V + 10 [mV]) / -6.24 [mV])))
          )
        in [ms]
    inf = 1 / (1 + exp((V + 10 [mV]) / -8 [mV]))
dot(f) = (inf - f) / tau
    tau = 9 [ms] / (0.0197 * exp(-0.0337 [1/mV]^2 * (V + 10 [mV])^2) + 0.02)
        in [ms]
    inf = 1 / (1 + exp((V + 28 [mV]) / 6.9 [mV]))  # CellML model 1/(1+exp(x)) as exp(-x)/(1+exp(-x) here...
dot(fCa) = (inf - fCa) / tau
    tau = 2 [ms]
        in [ms]
    inf = 1 / (1 + Cai / 0.00035 [mM])
ECaL = 65 [mV]
    in [mV]
    desc: Reversal potential for ICaL
gCaL = 0.12375 [nS/pF] # Paper uses 0.1238, CellML uses 0.12375
    in [nS/pF]
    desc: Maximal ICaL conductance
ICaL = gCaL * d * f * fCa * (V - ECaL)
    in [A/F]
    label I_CaL

#
# Acetylcholine-activated potassium current
#
# From [3], without changes.
#
[ikach]
use membrane.V, nernst.EK
ACh = 0 [mM]
    in [mM]
E_max = 10
EC50 = 9.13652
n = 0.477811
E = 10 / (1 + 9.13652 / (ACh / 1 [mM])^n)
g = (0.0517 [mS/uF] + 0.4516 [mS/uF] / (1 + exp((V + 59.53 [mV]) / 17.18 [mV])))
    in [mS/uF]
IKACh = E * g * (V - EK)
    in [A/F]

#
# Na+-K+ pump current
#
# Page H303, Table 1 in [2]
# Page H308, Equation 10 in [2]
# Page H319, Equations 57-59 in [2]
#
[inak]
use membrane.V, phys.FRT
use sodium.Nai, extra.Nao, extra.Ko
INaK_max = 0.59933874 [A/F]
    in [A/F]
    desc: Maximal INaK
KmNai = 10 [mM]
    in [mM]
    desc: [Na+]i half-saturation constant for INaK
KmKo = 1.5 [mM]
    in [mM]
    desc: [K+]o half-saturation constant for INaK
sigma = (exp(Nao / 67.3 [mM]) - 1) / 7
    desc: [Na+]o-dependence parameter for INaK
fNaK = 1 / (1 + 0.1245 * exp(-0.1 * V * FRT) + 0.0365 * sigma * exp(-V * FRT))
    desc: Voltage-dependence parameter for INaK
INaK = INaK_max * fNaK * Ko / (Ko + KmKo) / (1 + (KmNai / Nai)^1.5)
    in [A/F]
    label I_NaK

#
# Na+/Ca2+ exchanger current
#
# Page H303, Table 1 in [2]
# Page H308, Equation 11 in [2]
# Page H319, Equation 60 in [2]
#
[inaca]
use membrane.V, phys.FRT
use sodium.Nai, calcium.Cai
use extra.Nao, extra.Cao
INaCa_max = 1600 [A/F]
    in [A/F]
    desc: Maximal INaCa
g = 0.35
    desc: Voltage-dependence parameter for INaCa
KmNa = 87.5 [mM]
    in [mM]
    desc: [Na+]i half-saturation constant for INaCa
KmCa = 1.38 [mM]
    in [mM]
    desc: [Ca2+]o half-saturation constant for INaCa
ksat = 0.1
    desc: Saturation factor for INaCa
INaCa = INaCa_max * (
            exp(g * V * FRT) * Nai^3 * Cao - exp((g - 1) * V * FRT) * Nao^3 * Cai
        ) / (
            (KmNa^3 + Nao^3) * (KmCa + Cao) * (1 + ksat * exp((g - 1) * V * FRT))
        )
    in [A/F]
    label I_NaCa

#
# Background currents
#
# Page H303, Table 1 in [2]
# Page H308, Equations 12-13 in [2]
# Page H319, Equations 61-62 in [2]
#
[ib]
use membrane.V
gbCa = 0.001131 [nS/pF]
    in [nS/pF]
gbNa =  0.0006744375 [nS/pF]  # Extra digits 4375 from CellML
    in [nS/pF]
IbCa = gbCa * (V - nernst.ECa)
    in [A/F]
IbNa = gbNa * (V - nernst.ENa)
    in [A/F]

#
# Sarcolemmal calcium pump current
#
# Page H303, Table 1 in [2]
# Page H308, Equation 14 in [2]
# Page H319, Equation 63 in [2]
#
[ipca]
use calcium.Cai
IpCa_max = 0.275 [A/F]
    in [A/F]
    desc: Maximal IpCa
IpCa = IpCa_max * Cai / (0.0005 [mM] + Cai)
    in [A/F]

#
# Calcium release from the JSR
#
# Page H303, Table 1 in [2]
# Page H308, Equation 15 in [2]
# Page H319, Equations 64-68 in [2]
#
#
[cajsr]
use membrane.V
use geom.V_rel, geom.Cm, phys.F
dot(u) = (inf - u) / tau
    tau = 8 [ms]
        in [ms]
    inf = 1 / (1 + exp(-(Fn - c1) / c2))
dot(v) = (inf - v) / tau
    tau = 1.91 [ms] + 2.09 [ms] / (1 + exp(-(Fn - c1) / c2))
        in [ms]
    inf = 1 - (1 + exp(-(Fn - 0.2 * c1) / c2)) ^ (-1)
dot(w) = (inf - w) / tau
    tau = 6 [ms*mV] * if(abs(V - 7.9 [mV]) < 1e-6 [mV],
            2 / 13 [mV],
            (1 - exp(-(V - 7.9 [mV]) / 5 [mV])) / ((1 + 0.3 * exp(-(V - 7.9 [mV]) / 5 [mV])) * (V - 7.9 [mV]))
        )
        in [ms]
    inf = 1 - 1 / (1 + exp(-(V - 40 [mV]) / 17 [mV]))
Fn = 1e-12 [mL/um^3] * V_rel * I_rel - 5e-13 [mL/um^3] / F * (0.5 * ical.ICaL - 0.2 * inaca.INaCa) * Cm
    desc: Sarcoplasmic Ca2+ flux signal for Irel
    in [umol/ms]
c1 = 3.4175e-13 [umol/ms]
    in [umol/ms]
c2 = 13.67e-16 [umol/ms]
    in [umol/ms]
K_rel = 30 [1/ms]
    in [1/ms]
    desc: Maximal release rate for I_real
I_rel = K_rel * u^2 * v * w * (calcium.CaRel - calcium.Cai)
    in [mM/ms]

#
# Transfer current from NSR to JSR
#
# Page H309, equation 16 in [2]
# Page H319, equations 69-70 in [2]
#
[itr]
tau_tr = 180 [ms]
    in [ms]
I_tr = (calcium.CaUp - calcium.CaRel) / tau_tr
    in [mM/ms]

#
# Calcium uptake by and leak from the NSR
#
# Page H303, Table 1 in [2]
# Page H309, equation 17 in [2]
# Page H319, equations 71-72 in [2]
#
[cansr]
I_up_max = 0.005 [mM/ms]
    in [mM/ms]
    desc: Maximal Ca2+ uptake rate for Iup
K_up = 0.00092 [mM]
    in [mM]
    desc: [Ca2+]i half-saturation constant for Iup
Ca_up_max = 15 [mM]
    in [mM]
    desc: Maximal Ca2+ concentration in SR
I_up = I_up_max / (1 + K_up / calcium.Cai)
    in [mM/ms]
I_up_leak = I_up_max * calcium.CaUp / Ca_up_max
    in [mM/ms]

#
# Calcium buffers
#
# Page H303, Table 1 in [2]
# Page H319, equations 73-75 in [2]
#
[ca_buffers]
use calcium.Cai, calcium.CaRel
CMDN_max = 0.05 [mM]
    in [mM]
    desc: Total calmodulin concentration in myoplasm
TRPN_max = 0.07 [mM]
    in [mM]
    desc: Total troponin concentration in myoplasm
CSQN_max = 10 [mM]
    in [mM]
    desc: Total calsequestrin concentration in SR release compartment
Km_CMDN = 0.00238 [mM]
    in [mM]
    desc: Ca2_+ half-saturation constant for calmodulin
Km_TRPN = 0.0005 [mM]
    in [mM]
    desc: Ca2_+ half-saturation constant for troponin
Km_CSQN = 0.8 [mM]
    in [mM]
    desc: Ca2_+ half-saturation constant for Iup
Ca_CMDN = CMDN_max * Cai / (Cai + Km_CMDN)
    in [mM]
    desc: Ca2+-bound calmodulin concentration
Ca_TRPN = TRPN_max * Cai / (Cai + Km_TRPN)
    in [mM]
    desc: Ca2+-bound troponin concentration
Ca_CSQN = CSQN_max * CaRel / (CaRel + Km_CSQN)
    in [mM]
    desc: Ca2+-bound calsequestrin concentration

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      50       0.5      1000     0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(3000)

# Display the results
plt.figure()
plt.plot(d['engine.time'], d['membrane.V'])
plt.show()

