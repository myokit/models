[[model]]
name: trovato-2020
version: 20240904
mmt_authors: Michael Clerx
desc: """
    The 2020 model of the human Purkinje cell AP by Trovato et al. [1].

    Current and flux formulations were largely adapted from [2] and [3],
    although the INa formulation is from [4, 5].

    This Myokit implementation is based on the CellML provided by Cristian
    Trovato [6]. After import, the equations were reformatted significantly,
    and several unit corrections were applied. The resulting Myokit
    implementation was verified by comparing the calculated derivatives to the
    original CellML and seeing that they matched to within machine precision.
    After this verification, a minor correction to INaK was applied [6].
    
    The stimulus was set to approximately twice the minimum needed to create
    three successive APs when pacing at 1Hz with a 0.5ms stimulus.

    [1] Trovato, C., Passini, E., Nagy, N. Varró, A., Abi-Gerges, N., Severi,
        S., & Rodriguez, B. (2020). Human Purkinje in silico model enables
        mechanistic investigations into automaticity and pro-arrhythmic
        abnormalities. Journal of Molecular and Cellular Cardiology, 142,
        24-38.
        https://doi.org/10.1016/j.yjmcc.2020.04.001

    [2] O'Hara, T., Virág, L., Varró, A., & Rudy, Y. (2011). Simulation of the
        Undiseased Human Cardiac Ventricular Action Potential: Model
        Formulation and Experimental Validation. PLOS Computational Biology,
        7(5), e1002061.
        https://doi.org/10.1371/journal.pcbi.1002061

    [3] Li, P., & Rudy, Y. (2011).  A model of canine purkinje cell
        electrophysiology and Ca2 cycling: rate dependence, triggered activity,
        and comparison to ventricular myocytes. Circulation Research, 109,
        71-79.
        https://doi.org/10.1161/CIRCRESAHA.111.246512

    [4] Dutta, S., Mincholé, A., Quinn, T. A., & Rodriguez, B. (2017).
        Electrophysiological Properties of Computational Human Ventricular Cell
        Action Potential Models under Acute Ischemic Conditions. Progress in
        Biophysics and Molecular Biology, 129, 40-52.
        https://doi.org/10.1016/j.pbiomolbio.2017.02.007

    [5] Passini, E., Mincholé, A., Coppini, R., Cerbai, E., Rodriguez, B.,
        Severi, S., Bueno-Orovio, A. (2016). Mechanisms of Pro-Arrhythmic
        Abnormalities in Ventricular Repolarisation and Anti-Arrhythmic
        Therapies in Human Hypertrophic Cardiomyopathy. Journal of Molecular
        and Cellular Cardiology, 96, 72-81.
        https://doi.org/10.1016/j.yjmcc.2015.09.003

    [6] Author-provided CellML code
        https://www.cs.ox.ac.uk/insilicocardiotox/purkinje-models

    [7] INaK correction
        https://docs.google.com/document/d/111fqNzQGvGAjB_PrkvejEhzqwROrR6czz_OBz7Ep-iM

"""
# Initial values
membrane.V     = -8.66985820723609635e+01
sodium.Na_i    =  8.25080068244571585e+00
sodium.Na_sl   =  8.25049062394820787e+00
sodium.Na_ss   =  8.25049882891951114e+00
potassium.K_i  =  1.43748446690661638e+02
potassium.K_sl =  1.43748862037825376e+02
potassium.K_ss =  1.43748860323125911e+02
calcium.Ca_i   =  4.36018027061398910e-05
calcium.Ca_sl  =  1.01981574051339665e-04
calcium.Ca_ss  =  1.02563981760888366e-04
calcium.Ca_jsr =  1.24708017314336783e+00
calcium.Ca_nsr =  1.26318347674469589e+00
calcium.Ca_csr =  1.26478948126452329e+00
ina.m          =  6.31235529623128035e-03
ina.hf         =  7.89016399002087199e-01
ina.hs         =  7.88968792032323396e-01
ina.j          =  7.90909365439582235e-01
ina.hsp        =  5.80250432476840494e-01
ina.jp         =  7.91350295744255527e-01
inal.m         =  2.41137584250641755e-04
inal.h         =  4.63533134242609446e-01
inal.hp        =  2.39881256878268279e-01
ito.a          =  2.72491907116796368e-04
ito.i1         =  6.46128649817582112e-01
ito.i2         =  9.89976895550229608e-01
ical.d         =  6.94912321684335301e-09
ical.ff        =  9.99999968357935587e-01
ical.fs        =  9.26274135031736945e-01
ical.fcaf      =  9.99999968331690248e-01
ical.fcas      =  9.99999892776446631e-01
ical.jca       =  9.99976125332735721e-01
ical.ffp       =  9.99999968489023172e-01
ical.fcafp     =  9.99999968400510419e-01
ical.nca       =  5.60194939163951612e-03
icat.b         =  3.03505324472092019e-04
icat.g         =  9.94232431489039281e-01
ikr.xf         =  3.65183187981566067e-04
ikr.xs         =  5.71409282265632479e-01
iks.x1         =  1.91454549676001701e-01
iks.x2         =  2.22308576084213454e-04
if.y           =  2.32920724306342086e-01
ik1.x          =  9.97081444183096188e-01
ryr.Jrel1      =  2.45486707418609694e-04
ryr.Jrel2      =  5.41467361712119318e-65
ip3.u          =  4.67211835851223278e-01
camk.trapped   =  5.07506636422417473e-03
#
# Simulator variables
#
[engine]
time = 0 [ms]
    in [ms]
    bind time
pace = 0
    bind pace

#
# Membrane potential
# Supplement pages 26 and 28
#
[membrane]
dot(V) = -(i_ion + stimulus.i_stim)
    in [mV]
    label membrane_potential
i_ion = (ina.INa + inal.INaL
         + ito.Ito + isus.Isus
         + ical.ICaLCa + icat.ICaT + ical.ICaLNa + ical.ICaLK
         + ikr.IKr + iks.IKs + if.If + ik1.IK1
         + inaca.INaCa + inacass.INaCa_ss
         + inak.INaK + inab.INab + ipca.IpCa + icab.ICab)
    in [A/F]

#
# Stimulus current
#
[stimulus]
i_stim = engine.pace * amplitude
    in [A/F]
amplitude = -33 [A/F] * 2
    in [A/F]

#
# Cell geometry
# Supplement page 26
#
[cell]
L = 0.0164 [cm] : Cell length
    in [cm]
r = 0.00175 [cm] : Cell radius
    in [cm]
pi = 3.14159265
vcell = 1000 [uL/mL] * pi * r * r * L
    in [uL]
    desc: Cell volume
Acap = 2 * Ageo
    in [cm^2]
    desc: Geometric cell area
Ageo = 2 * pi * r * r + 2 * pi * r * L
    in [cm^2]
    desc: Capacitative membrane area
AFC = Acap / phys.F * 1 [uF/cm^2]
    in [uF*mol/C]
vmyo = 0.6 * vcell
    in [uL]
    desc: Volume of the cytosolic compartment
vnsr = 0.04 * vcell
    in [uL]
    desc: Volume of the NSR compartment
vjsr = 0.002 * vcell
    in [uL]
    desc: Volume of the JSR compartment
vcsr = 0.008 * vcell
    in [uL]
vss = 0.02 * vcell
    in [uL]
vsl = 0.15 * vcell
    in [uL]

#
# Physical constants
#
[phys]
R = 8314 [J/kmol/K] : Gas constant
    in [J/kmol/K]
T = 310 [K] : Temperature
    in [K]
F = 96485 [C/mol] : Faraday constant
    in [C/mol]
RTF = R * T / F
    in [mV]
FRT = F / (R * T)
    in [1/mV]
FFRT = F * FRT
    in [C/mol/mV]

#
# Extracellular concentrations
# Supplement page 26
#
[extra]
Na_o = 140 [mM] : Extracellular Na+ concentration
    in [mM]
Ca_o = 1.8 [mM] : Extracellular Ca2+ concentration
    in [mM]
K_o = 5.4 [mM] : Extracellular K+ concentration
    in [mM]

#
# Reversal potentials
#
[rev]
E_Na = phys.RTF * log(extra.Na_o / sodium.Na_sl)
    in [mV]
E_K = phys.RTF * log(extra.K_o / potassium.K_sl)
    in [mV]
PKNa = 0.01833
    desc: Permeability ratio K+ to Na+
E_Ks = phys.RTF * log((extra.K_o + PKNa * extra.Na_o) / (potassium.K_sl + PKNa * sodium.Na_sl))
    in [mV]
E_Ca = 0.5 * phys.RTF * log(extra.Ca_o / calcium.Ca_sl)
    in [mV]

#
# INa: Fast sodium current
# Supplement page 28, adapted from [4,5]
#
[ina]
use membrane.V
tau_m = 1 [ms] / (6.765 * exp((V + 11.64 [mV]) / 34.77 [mV]) + 8.552 * exp(-(V + 77.42 [mV]) / 5.955 [mV]))
    in [ms]
dot(m) = (inf - m) / tau_m
    inf = 1 / (1 + exp(-(V + 48.4264 [mV]) / 7.5653 [mV]))
h_inf = 1 / (1 + exp((V + 78.5 [mV]) / 6.22 [mV]))
dot(hf) = (h_inf - hf) / tau
    tau = 1 [ms] / (3.686e-6 * exp(-(V + 3.8875 [mV]) / 7.8579 [mV]) + 16 * exp((V - 0.4963 [mV]) / 9.1843 [mV]))
        in [ms]
tau_h = 1 [ms] / (0.009794 * exp(-(V + 17.95 [mV]) / 28.05 [mV]) + 0.3343 * exp((V + 5.73 [mV]) / 56.66 [mV]))
    in [ms]
dot(hs) = (h_inf - hs) / tau_h
dot(hsp) = (inf - hsp) / (3 * tau_h)
    inf = 1 / (1 + exp((V + 84.7 [mV]) / 6.22 [mV]))
tau_j = 4.859 [ms] + 1 [ms] / (0.8628 * exp(-(V + 116.7258 [mV]) / 7.6005 [mV]) + 1.1096 * exp((V + 6.2719 [mV]) / 9.0358 [mV]))
    in [ms]
dot(j) = (h_inf - j) / tau_j
dot(jp) = (h_inf - jp) / (1.46 * tau_j)
Ahf = 0.99
h = Ahf * hf + (1 - Ahf) * hs
hp = Ahf * hf + (1 - Ahf) * hsp
gNa = 39.4572 [mS/uF]
    in [mS/uF]
INa = gNa * (V - rev.E_Na) * m^3 * ((1 - camk.f) * h * j + camk.f * hp * jp)
    in [A/F]

#
# INaL: Late component of the sodium current
# Supplement, page 29, adapted from [2]
#
[inal]
use membrane.V
dot(m) = (inf - m) / ina.tau_m
    inf = 1 / (1 + exp(-(V + 42.85 [mV]) / 5.264 [mV]))
tau_h = 200 [ms]
    in [ms]
dot(h) = (inf - h) / tau_h
    inf = 1 / (1 + exp((V + 87.61 [mV]) / 7.488 [mV]))
dot(hp) = (inf - hp) / (3 * tau_h)
    inf = 1 / (1 + exp((V + 93.81 [mV]) / 7.488 [mV]))
gNaL = 0.0189 [mS/uF]
    in [mS/uF]
INaL = gNaL * (V - rev.E_Na) * m * ((1 - camk.f) * h + camk.f * hp)
    in [A/F]

#
# Ito: Transient outward potassium current
# Supplement page 32
#
[ito]
use membrane.V
dot(a) = (inf - a) / tau
    inf = 1 / (1 + exp((20 [mV] - V) / 13 [mV]))
    tau = 1.0515 [ms] / (1 / (1.2089 * (1 + exp(-(V - 18.4099 [mV]) / 29.3814 [mV]))) + 3.5 / (1 + exp((V + 100 [mV]) / 29.3814 [mV])))
        in [ms]
i_inf = 1 / (1 + exp((27 [mV] + V) / 13 [mV]))
dot(i1) = (i_inf - i1) / tau
    tau = 43 [ms] + 1 [ms] / (0.001416 * exp(-(V + 96.52 [mV]) / 59.05 [mV]) + 1.78e-8 * exp((V + 114.1 [mV]) / 8.079 [mV]))
        in [ms]
dot(i2) = (i_inf - i2) / tauif
    tauif = 6.162 [ms] + 1 [ms] / (0.3933 * exp(-(V + 100 [mV]) / 100 [mV]) + 0.08004 * exp((V - 8 [mV]) / 8.59 [mV]))
        in [ms]
gto = 0.192 [mS/uF]
    in [mS/uF]
Ito = gto * a * i1 * i2 * (V - rev.E_K)
    in [A/F]

#
# ICaL: L-type calcium current
# Supplement, page 29, adapted from [2]
#
[ical]
use membrane.V
use extra.Ca_o, extra.K_o, extra.Na_o
use calcium.Ca_ss, potassium.K_ss, sodium.Na_ss
# Activation
dot(d) = (inf - d) / tau
    inf = 1 / (1 + exp((V + 3.94 [mV] + 3.3 [mV]) / -4.23 [mV]))
    tau = 0.6 [ms] + 1 [ms] / (exp(-0.05 [1/mV] * (V + 6 [mV])) + exp(0.09 [1/mV] * (V + 14 [mV])))
        in [ms]
# Voltage-dependent inactivation (fast and slow)
f_inf = 1 / (1 + exp((V + 19.58 [mV] + 3.3 [mV]) / 3.696 [mV]))
ff_tau = 7 [ms] + 1 [ms] / (0.0045 * exp((V + 20 [mV] + 15.19 [mV]) / -10 [mV]) + 0.0045 * exp((V + 20 [mV] + 15.19 [mV]) / 10 [mV]))
    in [ms]
fs_tau = 1000 [ms] + 1 [ms] / (3.5e-5 * exp((V + 5 [mV] + 15.19 [mV]) / -4 [mV]) + 3.5e-5 * exp((V + 5 [mV] + 15.19 [mV]) / 6 [mV]))
    in [ms]
dot(ff) = (f_inf - ff) / ff_tau
dot(fs) = (f_inf - fs) / fs_tau
Aff = 0.6 : Fraction of channels with fast inactivation
f = Aff * ff + (1 - Aff) * fs : Total voltage-dependent inactivation
# Calcium-dependent inactivation of non-phosphorylated channels
fcaf_tau = 0.72 * (7 [ms] + 1 [ms] / (0.04 * exp((V + 15.19 [mV] - 4 [mV]) / -7 [mV]) + 0.04 * exp((V + 15.19 [mV] - 4 [mV]) / 7 [mV])))
    in [ms]
fcas_tau = 0.49 * (100 [ms] + 1 [ms] / (0.00012 * exp((V + 15.19 [mV]) / -3 [mV]) + 0.00012 * exp((V + 15.19 [mV]) / 7 [mV])))
    in [ms]
dot(fcaf) = (f_inf - fcaf) / fcaf_tau
dot(fcas) = (f_inf - fcas) / fcas_tau
Afcaf = 0.3 + 0.6 / (1 + exp((V - 10 [mV]) / 10 [mV]))
    desc: Fraction of ICaL channels with fast Ca-dependent inactivation
fca = Afcaf * fcaf + (1 - Afcaf) * fcas
    desc: Ca-dependent inactivation of non-phosphorylated ICaL
# Recovery from Ca-dependent inactivation
jca_tau = 75 [ms]
    in [ms]
dot(jca) = (f_inf - jca) / jca_tau
    desc: Recovery from Ca-dependent inactivation
# Voltage-dependent inactivation of phosphorylated channels
dot(ffp) = (f_inf - ffp) / (2.5 * ff_tau)
fp = Aff * ffp + (1 - Aff) * fs
    desc: Voltage-dependent inactivation of phosphorylated ICaL
# Calcium-dependent inactivation of phosphorylated channels
dot(fcafp) = (f_inf - fcafp) / (2.5 * fcaf_tau)
fcap = Afcaf * fcafp + (1 - Afcaf) * fcas
    desc: Ca-dependent inactivation of phosphorylated channels
# Fraction of channels in Ca-dependent inactivation mode
Kmn = 0.002 [mM] in [mM]
k2n = 1000 [1/ms] in [1/ms]
km2n = jca * 1 [1/ms] in [1/ms]
anca = 1 / (k2n / km2n + (1 + Kmn / Ca_ss)^4)
dot(nca) = anca * k2n - nca * km2n
    desc: Fraction of channels in Ca-dependent inactivation mode
# Permeabilities
vf = V * phys.FRT
vff = V * phys.FFRT
    in [C/mol]
evf = exp(vf)
evf2 = exp(2 * vf)
PhiCa = 4 * vff * (Ca_ss * evf2 - 0.341 * Ca_o) / (evf2 - 1)
    in [mC/L]
PhiNa = 0.75 * vff * (Na_ss * evf - Na_o) / (evf - 1)
    in [mC/L]
PhiK = 0.75 * vff * (K_ss * evf - K_o) / (evf - 1)
    in [mC/L]
PCa =  7.7677e-5 [L/F/ms]
    in [L/F/ms]
PNa = 0.00125 * PCa
    in [L/F/ms]
PK = 3.574e-4 * PCa
    in [L/F/ms]
Pp = 1.1
    desc: Permeability multiplication factor for phosphorylated channels
# Conductivity (weighted sum of gates)
g = d * ((f  * (1 - nca) + jca * fca * nca) * (1 - camk.f) +
         (fp * (1 - nca) + jca * fcap * nca) * camk.f * Pp)
# Current
ICaLCa = g * PCa * PhiCa
    in [A/F]
    desc: Ca-component of L-type calcium current
ICaLNa = g * PNa * PhiNa
    in [A/F]
    desc: Na-component of L-type calcium current
ICaLK = g * PK * PhiK
    in [A/F]
    desc: K-component of L-type calcium current
ICaL_tot = ICaLCa + ICaLK + ICaLNa
    in [A/F]
    label ICaL

#
# ICaT: T-type calcium current
# Supplement page 31, adapted from [3]
#
[icat]
use membrane.V
dot(b) = (inf - b) / tau
    inf = 1 / (1 + exp(-(V + 30 [mV]) / 7 [mV]))
    tau = 1 [ms] / (1.068 * exp((V + 16.3 [mV]) / 30 [mV]) + 1.068 * exp(-(V + 16.3 [mV]) / 30 [mV]))
        in [ms]
dot(g) = (inf - g) / tau
    inf = 1 / (1 + exp((V + 61 [mV]) / 5 [mV]))
    tau = 1 [ms] / (0.015 * exp((V + 71.7 [mV]) / 15.4 [mV]) + 0.015 * exp(-(V + 71.7 [mV]) / 83.3 [mV]))
        in [ms]
gCaT = 0.0754 [mS/uF]
    in [mS/uF]
ICaT = gCaT * b * g * (V - rev.E_Ca)
    in [A/F]

#
# IKr: Rapid delayed rectifier potassium current
# Supplement page 32, adapted from [2]
#
[ikr]
use membrane.V
x_inf = 1 / (1 + exp((V + 8.337 [mV]) / -6.789 [mV]))
dot(xf) = (x_inf - xf) / tau
    tau = 12.98 [ms] + 1 [ms] / (0.36520 * exp((V + 17.6 [mV] - 31.66 [mV]) / 3.869 [mV]) + 4.123e-5 * exp((V + 17.6 [mV] - 47.78 [mV]) / -20.38 [mV]))
        in [ms]
dot(xs) = (x_inf - xs) / tau
    tau = 1.865 [ms] + 1 [ms] / (0.06629 * exp((V + 17.2 [mV] - 34.7 [mV]) / 7.355 [mV]) + 1.128e-5 * exp((V + 17.2 [mV] - 29.74 [mV]) / -25.94 [mV]))
        in [ms]
x = A * xf + (1 - A) * xs
    A = 1 / (1 + exp((V + 54.81 [mV]) / 38.21 [mV]))
        desc: Fraction of IKr channels with fast activation
r = 1 / (1 + exp((V + 55 [mV]) / (0.32 * 75 [mV]))) * 1 / (1 + exp((V - 10 [mV]) / (0.32 * 30 [mV])))
    desc: Instantaneous IKr inactivation
gKr = 0.0342 [mS/uF]
    in [mS/uF]
IKr = gKr * sqrt(extra.K_o / 5.4 [mM]) * x * r * (V - rev.E_K)
    in [A/F]

#
# IKs: Slow delayed rectifier potassium current
# Supplement page 33, adapted from [2]
#
[iks]
use membrane.V
x_inf = 1 / (1 + exp((V + 11.6 [mV]) / -8.932 [mV]))
dot(x1) = (x_inf - x1) / tau
    desc: Slow, low voltage IKs activation
    tau = 817.3 [ms] + 1 [ms] / (2.326e-4 * exp((V + 48.28 [mV]) / 17.8 [mV]) + 0.001292 * exp((V + 210 [mV]) / -230 [mV]))
        in [ms]
dot(x2) = (x_inf - x2) / tau
    desc: Fast, high voltage IKs activation
    tau = 1 [ms] / (0.01 * exp((V - 50 [mV]) / 20 [mV]) + 0.0193 * exp((V + 66.54 [mV]) / -31 [mV]))
        in [ms]
KsCa = 1 + 0.6 / (1 + (3.8e-5 [mM] / calcium.Ca_sl)^1.4)
gKs = 0.0029 [mS/uF]
    in [mS/uF]
IKs = gKs * KsCa * x1 * x2 * (V - rev.E_Ks)
    in [A/F]

#
# IK1: Inward rectifier potassium current
# Supplement page 33
#
[ik1]
use membrane.V
use extra.K_o
dot(x) = (inf - x) / tau
    desc: Time-dependent inactivation at hyperpolarised (low) potentials
    inf = 1 / (1 + exp(-(V + 2.5538 [mV/mM] * K_o + 144.59 [mV]) / (1.5692 [mV/mM] * K_o + 3.8115 [mV])))
    tau = 122.2 [ms] / (exp((V + 127.2 [mV]) / -20.36 [mV]) + exp((V + 236.8 [mV]) / 69.33 [mV]))
        in [ms]
r = 1 / (1 + exp((V + 116 [mV] - 5.5 [V/M] * K_o) / 11 [mV]))
    desc: Instantaneous rectification
gK1 = 0.0455 [mS/uF] * 2.3238
    in [mS/uF]
IK1 = gK1 * sqrt(K_o / 5.4 [mM]) * r * x * (V - rev.E_K)
    in [A/F]

#
# Sustained potassium current Isus
# Supplement page 32
#
[isus]
use membrane.V
a = 1 / (1 + exp(-(V - 12 [mV]) / 16 [mV]))
gsus = 0.0301 [mS/uF]
    in [mS/uF]
Isus = gsus * a * (V - rev.E_K)
    in [A/F]

#
# Funny current / Hyperpolarization-activated current If
# Supplement page 33, adapted from [3]
#
[if]
use membrane.V
dot(y) = (inf - y) / tau
    inf = 1 / (1 + exp((V + 87 [mV]) / 9.5 [mV]))
    tau = 2000 [ms] / (exp((V + 57 [mV]) / 60 [mV]) + exp(-(V + 132 [mV]) / 10 [mV]))
        in [ms]
gfK = 0.0232 [mS/uF]
    in [mS/uF]
gfNa = 0.0116 [mS/uF]
    in [mS/uF]
If = IfNa + IfK
    in [A/F]
IfK = gfK * y * y * (V - rev.E_K)
    in [A/F]
IfNa = gfNa * y * y * (V - rev.E_Na)
    in [A/F]

#
# Sodium-calcium exchanger, SL subspace
# Supplement page 34, adapted from [2]
#
[inaca]
use extra.Na_o, extra.Ca_o
use sodium.Na_sl, calcium.Ca_sl
kna1 = 15 [mM]
    in [mM]
kna2 = 5 [mM]
    in [mM]
kna3 = 88.12 [mM]
    in [mM]
kasymm = 12.5
wna = 6e4 [1/s]
    in [1/s]
wca = 6e4 [1/s]
    in [1/s]
wnaca = 5e3 [1/s]
    in [1/s]
kcaon = 1.5e6 [1/mM/s]
    in [1/mM/s]
kcaoff = 5e3 [1/s]
    in [1/s]
qna = 0.5224
qca = 0.167
hca = exp(qca * membrane.V * phys.FRT)
hna = exp(qna * membrane.V * phys.FRT)
# h parameters
h1 = 1 + Na_sl / kna3 * (1 + hna)
h2 = Na_sl * hna / (kna3 * h1)
h3 = 1 / h1
h4 = 1 + Na_sl / kna1 * (1 + Na_sl / kna2)
h5 = Na_sl * Na_sl / (h4 * kna1 * kna2)
h6 = 1 / h4
h7 = 1 + Na_o / kna3 * (1 + 1 / hna)
h8 = Na_o / (kna3 * hna * h7)
h9 = 1 / h7
h10 = kasymm + 1 + Na_o / kna1 * (1 + Na_o / kna2)
h11 = Na_o * Na_o / (h10 * kna1 * kna2)
h12 = 1 / h10
# k parameters
k1 = h12 * Ca_o * kcaon
    in [1/s]
k2 = kcaoff
    in [1/s]
k3p = h9 * wca
    in [1/s]
k3pp = h8 * wnaca
    in [1/s]
k3 = k3p + k3pp
    in [1/s]
k4p = h3 * wca / hca
    in [1/s]
k4pp = h2 * wnaca
    in [1/s]
k4 = k4p + k4pp
    in [1/s]
k5 = kcaoff
    in [1/s]
k6 = h6 * Ca_sl * kcaon
    in [1/s]
k7 = h5 * h2 * wna
    in [1/s]
k8 = h8 * h11 * wna
    in [1/s]
x1 = k2 * k4 * (k7 + k6) + k5 * k7 * (k2 + k3)
    in [s^-3]
x2 = k1 * k7 * (k4 + k5) + k4 * k6 * (k1 + k8)
    in [s^-3]
x3 = k1 * k3 * (k7 + k6) + k8 * k6 * (k2 + k3)
    in [s^-3]
x4 = k2 * k8 * (k4 + k5) + k3 * k5 * (k1 + k8)
    in [s^-3]
E1 = x1 / (x1 + x2 + x3 + x4)
E2 = x2 / (x1 + x2 + x3 + x4)
E3 = x3 / (x1 + x2 + x3 + x4)
E4 = x4 / (x1 + x2 + x3 + x4)
KmCaAct = 150e-6 [mM]
    in [mM]
allo = 1 / (1 + (KmCaAct / Ca_sl)^2)
JncxNa = 3 * (E4 * k7 - E1 * k8) + E3 * k4pp - E2 * k3pp
    in [1/s]
JncxCa = E2 * k2 - E1 * k1
    in [1/s]
gNaCa = 9.5709e-4 [C/F]
    in [C/F]
INaCa = 0.8 * gNaCa * allo * (JncxNa + 2 * JncxCa)
    in [A/F]
    desc: Sodium/calcium exchange current

#
# Sodium-calcium exchanger, SS subspace
# Supplement page 34, adapted from [2]
#
[inacass]
use extra.Na_o, extra.Ca_o
use sodium.Na_ss, calcium.Ca_ss
use inaca.kna1, inaca.kna2, inaca.kna3, inaca.hna
# Parameters h
h1 = 1 + Na_ss / kna3 * (1 + hna)
h2 = Na_ss * hna / (kna3 * h1)
h3 = 1 / h1
h4 = 1 + Na_ss / kna1 * (1 + Na_ss / kna2)
h5 = Na_ss * Na_ss / (h4 * kna1 * kna2)
h6 = 1 / h4
h7 = 1 + Na_o / kna3 * (1 + 1 / hna)
h8 = Na_o / (kna3 * hna * h7)
h9 = 1 / h7
h10 = inaca.kasymm + 1 + Na_o / kna1 * (1 + Na_o / kna2)
h11 = Na_o * Na_o / (h10 * kna1 * kna2)
h12 = 1 / h10
# Parameters k
k1 = h12 * Ca_o * inaca.kcaon
    in [1/s]
k2 = inaca.kcaoff
    in [1/s]
k3p = h9 * inaca.wca
    in [1/s]
k3pp = h8 * inaca.wnaca
    in [1/s]
k3 = k3p + k3pp
    in [1/s]
k4p = h3 * inaca.wca / inaca.hca
    in [1/s]
k4pp = h2 * inaca.wnaca
    in [1/s]
k4 = k4p + k4pp
    in [1/s]
k5 = inaca.kcaoff
    in [1/s]
k6 = h6 * Ca_ss * inaca.kcaon
    in [1/s]
k7 = h5 * h2 * inaca.wna
    in [1/s]
k8 = h8 * h11 * inaca.wna
    in [1/s]
x1 = k2 * k4 * (k7 + k6) + k5 * k7 * (k2 + k3)
    in [s^-3]
x2 = k1 * k7 * (k4 + k5) + k4 * k6 * (k1 + k8)
    in [s^-3]
x3 = k1 * k3 * (k7 + k6) + k8 * k6 * (k2 + k3)
    in [s^-3]
x4 = k2 * k8 * (k4 + k5) + k3 * k5 * (k1 + k8)
    in [s^-3]
E1 = x1 / (x1 + x2 + x3 + x4)
E2 = x2 / (x1 + x2 + x3 + x4)
E3 = x3 / (x1 + x2 + x3 + x4)
E4 = x4 / (x1 + x2 + x3 + x4)
allo = 1 / (1 + (inaca.KmCaAct / Ca_ss)^2)
JncxNa = 3 * (E4 * k7 - E1 * k8) + E3 * k4pp - E2 * k3pp
    in [1/s]
JncxCa = E2 * k2 - E1 * k1
    in [1/s]
INaCa_ss = 0.2 * inaca.gNaCa * allo * (JncxNa + 2 * JncxCa)
    in [A/F]
    desc: Sodium/calcium exchange current into the SS subspace
INaCa_tot = INaCa_ss + inaca.INaCa
    in [A/F]

#
# INaK: Sodium-potassium ATPase current
# Supplement page 35, adapted from [2]
#
[inak]
use membrane.V
use extra.Na_o, sodium.Na_sl
use extra.K_o, potassium.K_sl
MgATP = 9.8 [mM]
    in [mM]
    desc: Intracellular MgATP concentration
MgADP = 0.05 [mM]
    in [mM]
    desc: Intracellular MgADP concentration
eP = 4.2 [mM]
    in [mM]
H = 1e-4 [mM]
    in [mM]
    desc: Intracellular H+
    note: Corrected to 1e-7 [M] (pH 7) from original value of 1e-7 [mM]
Khp = 1.698e-7 [mM]
    in [mM]
    desc: Dissociation constant relating [HPi] and [H]
Kxkur = 292 [mM]
    in [mM]
    desc: Dissociation constant relating [KPi] and [K]i
Knap = 224 [mM]
    in [mM]
    desc: Dissociation constant relating [NaPi] and [Na]i
k1p = 949.5 [1/s]
    in [1/s]
k1m = 182.4 [1/s/mM]
    in [1/s/mM]
k2p = 687.2 [1/s]
    in [1/s]
k2m = 39.4 [1/s]
    in [1/s]
k3p = 1899 [1/s]
    in [1/s]
k3m = 79300 [1/s/mM^2]
    in [1/s/mM^2]
k4p = 639 [1/s]
    in [1/s]
k4m = 40 [1/s]
    in [1/s]
Knao0 = 27.78 [mM]
    in [mM]
    desc: Extracellular Na+ dissociation constant at 0mV
Knai0 = 9.073 [mM]
    in [mM]
    desc: Intracellular Na+ dissociation constant at 0mV
Kko = 0.3582 [mM]
    in [mM]
    desc: Extracellular K+ dissociation constant
Kki = 0.5 [mM]
    in [mM]
    desc: Intracellular K+ dissociation constant
Kmgatp = 1.698e-7 [mM]
    in [mM]
    desc: Intracellular MgATP dissociation constant
delta = -0.155
    desc: """A constant that "determines how the voltage dependence is
             partitioned between intra and extracellular Na+ dissociation
             reactions."""
# Voltage-dependent Na+ dissociation constants
Knai = Knai0 * exp(delta * V * phys.FRT / 3)
    in [mM]
Knao = Knao0 * exp((1 - delta) * V * phys.FRT / 3)
    in [mM]
# Forward (clockwise) rates
a1 = k1p * (Na_sl / Knai)^3 / ((1 + Na_sl / Knai)^3 + (1 + K_sl / Kki)^2 - 1)
    in [1/s]
a2 = k2p
    in [1/s]
a3 = k3p * (K_o / Kko)^2 / ((1 + Na_o / Knao)^3 + (1 + K_o / Kko)^2 - 1)
    in [1/s]
a4 = k4p * MgATP / Kmgatp / (1 + MgATP / Kmgatp)
    in [1/s]
# Backward (anticlockwise) rates
b1 = k1m * MgADP
    in [1/s]
b2 = k2m * (Na_o / Knao)^3 / ((1 + Na_o / Knao)^3 + (1 + K_o / Kko)^2 - 1)
    in [1/s]
b3 = k3m * P * H / (1 + MgATP / Kmgatp)
    in [1/s]
b4 = k4m * (K_sl / Kki)^2 / ((1 + Na_sl / Knai)^3 + (1 + K_sl / Kki)^2 - 1)
    in [1/s]
P = eP / (1 + H / Khp + Na_sl / Knap + K_sl / Kxkur)
    in [mM]
# Terms used to calculate the steady-state occupancies of the four states
# Based on the "diagram method" described in [2], these terms are the sums of
# the reaction rates of all (non-cyclical) paths leading to each state
x1 = a4 * a1 * a2 + b1 * b4 * b3 + a2 * b4 * b3 + b3 * a1 * a2
    in [s^-3]
    note: Corrected from the original code (b1 in second term)
x2 = b2 * b1 * b4 + a1 * a2 * a3 + a3 * b1 * b4 + a2 * a3 * b4
    in [s^-3]
x3 = a2 * a3 * a4 + b3 * b2 * b1 + b2 * b1 * a4 + a3 * a4 * b1
    in [s^-3]
x4 = b4 * b3 * b2 + a3 * a4 * a1 + b2 * a4 * a1 + b3 * b2 * a1
    in [s^-3]
# Cycle rate (obtained by writing any one of the four flux equations: they all
# give the same result so that the pump count is conserved).
r = (a1 * a2 * a3 * a4 - b1 * b2 * b3 * b4) / (x1 + x2 + x3 + x4)
    in [1/s]
# INaK current
JnakNa = 3 * r
    in [1/s]
JnakK = -2 * r
    in [1/s]
PNaK = 32.4872 [C/F]
    in [C/F]
INaK = PNaK * (JnakNa + JnakK)
    in [A/F]
    desc: Sodium/potassium ATPase current

#
# Background sodium current
# Supplement page 37, adapted from [2]
#
[inab]
use membrane.V
PNab = 9.375e-10 [L/F/ms]
    in [L/F/ms]
INab = PNab * V * phys.FFRT * (sodium.Na_sl * evf - extra.Na_o) / (evf - 1)
    in [A/F]
    evf = exp(V * phys.FRT)
    desc: Background sodium current

#
# ICab: Background calcium current
# Supplement page 37, adapted from [2]
#
[icab]
use membrane.V
PCab = 2.5e-8 [L/F/ms]
    in [L/F/ms]
ICab = PCab * 4 * V * phys.FFRT * (calcium.Ca_sl * evf2 - 0.341 * extra.Ca_o) / (evf2 - 1)
    in [A/F]
    evf2 = exp(2 * V * phys.FRT)
    desc: Background calcium current

#
# IpCa: Sarcolemmal calcium pump current
# Supplement page 37, adapted from [2]
#
[ipca]
KmCap = 0.0005 [mM]
    in [mM]
gpCa = 0.0005 [A/F]
    in [A/F]
IpCa = gpCa * calcium.Ca_sl / (KmCap + calcium.Ca_sl)
    desc: Sarcolemmal calcium pump current
    in [A/F]

#
# Ryanodine receptor release fluxes
# Supplement page 37, adapted from [3]
#
[ryr]
dot(Jrel1) = (inf - Jrel1) / tau
    in [mM/ms]
    rel = -(ical.ICaLCa * cell.AFC / (cell.vss * 2) - (Jrel1 + ip3.Jip3) * cell.vjsr / cell.vss + diff.Jdiff)
        in [mM/ms]
    inf = if(rel > 0 [mM/ms],
             15 * (1 + 1 * 1 / (1 + (0.28 / camk.active)^8)) * rel / (1 + (1 [mM] / calcium.Ca_jsr)^8),
             0 [mM/ms])
        in [mM/ms]
    tau = 2 [ms] * (1 + 1 * 1 / (1 + (0.28 / camk.active)^8)) / (1 + 0.0123 [mM] / calcium.Ca_jsr)
        in [ms]
dot(Jrel2) = (inf - Jrel2) / tau
    in [mM/ms]
    rel = diff.Jgap * cell.vsl / cell.vmyo + -serca.Jup2 * cell.vnsr / cell.vmyo + Jrel2 * cell.vcsr / cell.vmyo
        in [mM/ms]
    inf = if(rel > 0 [mM/ms],
             91 * (1 + 1 * 1 / (1 + (0.28 / camk.active)^8)) * rel / (1 + (1 [mM] / calcium.Ca_csr)^8),
             0 [mM/ms])
        in [mM/ms]
    tau = 6 [ms] * (1 + 1 * 1 / (1 + (0.28 / camk.active)^8)) / (1 + 0.0123 [mM] / calcium.Ca_csr)
        in [ms]

#
# Ca uptake into SR
# Supplement page 38, adapted from [3]
#
[serca]
dkmplb = camk.f * 0.00017 [mM]
    in [mM]
dqupcamk = camk.f * 0.75
kmup = 0.00028 [mM]
    in [mM]
nsrbar = 15 [mM]
    in [mM]
Jup1 = 0.0002 [mM/ms] * (dqupcamk + 1) / (1 + (kmup - dkmplb) / calcium.Ca_sl) - 0.00105 [mM/ms] * calcium.Ca_nsr / nsrbar
    in [mM/ms]
Jup2 = 0.0026 [mM/ms] * (dqupcamk + 1) / (1 + (kmup - dkmplb) / calcium.Ca_i) - 0.0042 [mM/ms] * calcium.Ca_nsr / nsrbar
    in [mM/ms]

#
# Inositol Trisphosphate Receptor (IP3) Ca release
# Supplement page 38, adapted from [3]
#
[ip3]
dot(u) = (calcium.Ca_ss * k2p * (1 - u) - k2m * u) * 1 [s/ms]
    k2p = 1800 [1/mM/s]
        in [1/mM/s]
    k2m = 0.21 [1/s]
        in [1/s]
POip3 = tauip3 * IP3 * calcium.Ca_ss * (1 - u) / ((1 + IP3 * k0p / k0m) * (1 + calcium.Ca_ss * k1p / k1m))
    in [mM^2/ms]
    IP3 = 0.0001 [mM]
        in [mM]
    tauip3 = 3.7 [1/ms]
        in [1/ms]
    k0p = 96000 [1/mM/s]
        in [1/mM/s]
    k0m = 9.6 [1/s]
        in [1/s]
    k1p = 150000 [1/mM/s]
        in [1/mM/s]
    k1m = 16.5 [1/s]
        in [1/s]
Jip3 = 10.92 [1/mM^2] * POip3 * (calcium.Ca_jsr - calcium.Ca_ss)
    in [mM/ms]

#
# Ionic diffusion between SS and SL, and SL and bulk
# Supplement page 39
#
[diff]
sstau = 0.2 [ms]
    in [ms]
Jdiff = (calcium.Ca_ss - calcium.Ca_sl) / sstau
    in [mM/ms]
JdiffK = (potassium.K_ss - potassium.K_sl) / sstau
    in [mM/ms]
JdiffNa = (sodium.Na_ss - sodium.Na_sl) / sstau
    in [mM/ms]
gaptau = 12 [ms]
    in [ms]
Jgap = (calcium.Ca_sl - calcium.Ca_i) / gaptau
    in [mM/ms]
JgapK = (potassium.K_sl - potassium.K_i) / gaptau
    in [mM/ms]
JgapNa = (sodium.Na_sl - sodium.Na_i) / gaptau
    in [mM/ms]


#
# Internal sodium concentrations
# Supplement page 41
#
[sodium]
use cell.AFC, cell.vsl, cell.vss, cell.vmyo
dot(Na_i) = diff.JgapNa * vsl / vmyo
    in [mM]
dot(Na_sl) = -INa_sl * AFC / vsl + diff.JdiffNa * vss / vsl + -diff.JgapNa
    in [mM]
    INa_sl = ina.INa + inal.INaL + 3 * inaca.INaCa + 3 * inak.INaK + if.IfNa + inab.INab
        in [A/F]
dot(Na_ss) = -INa_ss * AFC / vss - diff.JdiffNa
    in [mM]
    INa_ss = ical.ICaLNa + 3 * inacass.INaCa_ss
        in [A/F]

#
# Internal potassium concentrations
# Supplement page 41
#
[potassium]
use cell.AFC, cell.vsl, cell.vss, cell.vmyo
dot(K_i) = diff.JgapK * vsl / vmyo
    in [mM]
dot(K_sl) = -(IK_sl + stimulus.i_stim) * AFC / vsl + diff.JdiffK * vss / vsl + -diff.JgapK
    in [mM]
    IK_sl = ito.Ito + isus.Isus + ikr.IKr + iks.IKs + if.IfK + ik1.IK1 - 2 * inak.INaK
        in [A/F]
dot(K_ss) = -ical.ICaLK * AFC / vss - diff.JdiffK
    in [mM]

#
# Internal calcium concentrations
# Supplement page 39
#
[calcium]
use cell.AFC, cell.vmyo, cell.vnsr, cell.vjsr, cell.vss, cell.vsl, cell.vcsr
cmdnmax = 0.1125 [mM]
    in [mM]
cmdnmaxsl = 0.0125 [mM]
    in [mM]
trpnmax = 0.0315 [mM]
    in [mM]
trpnmaxsl = 0.0035 [mM]
    in [mM]
BSRmax = 0.019975 [mM]
    in [mM]
BSLmax = 0.4777 [mM]
    in [mM]
csqnmax = 2.88 [mM]
    in [mM]
csqnmaxsl = 1.2 [mM]
    in [mM]
kmcmdn = 0.00238 [mM]
    in [mM]
kmtrpn = 0.0005 [mM]
    in [mM]
KmBSR = 0.00087 [mM]
    in [mM]
KmBSL = 0.0087 [mM]
    in [mM]
kmcsqn = 0.8 [mM]
    in [mM]
dot(Ca_i) = buff * (diff.Jgap * vsl / vmyo + ryr.Jrel2 * vcsr / vmyo - serca.Jup2 * vnsr / vmyo)
    in [mM]
    desc: Intracellular calcium concentration
    buff = 1 / (1 + cmdnmax * kmcmdn / (kmcmdn + Ca_i)^2 + trpnmax * kmtrpn / (kmtrpn + Ca_i)^2)
dot(Ca_sl) = buff * (-ICa_sl * AFC / (2 * vsl) - serca.Jup1 * vnsr / vsl + -diff.Jgap + diff.Jdiff * vss / vsl)
    in [mM]
    buff = 1 / (1 + cmdnmaxsl * kmcmdn / (kmcmdn + Ca_sl)^2 + trpnmaxsl * kmtrpn / (kmtrpn + Ca_sl)^2)
    ICa_sl = ipca.IpCa + icab.ICab + icat.ICaT - 2 * inaca.INaCa
        in [A/F]
dot(Ca_ss) = buff * (-ICa_ss * AFC / (2 * vss) + (ryr.Jrel1 + ip3.Jip3) * vjsr / vss - diff.Jdiff)
    in [mM]
    buff = 1 / (1 + BSRmax * KmBSR / (KmBSR + Ca_ss)^2 + BSLmax * KmBSL / (KmBSL + Ca_ss)^2)
    ICa_ss = ical.ICaLCa - 2 * inacass.INaCa_ss
        in [A/F]
dot(Ca_jsr) = buff * (trans_flux.Jtr1 - (ryr.Jrel1 + ip3.Jip3))
    in [mM]
    buff = 1 / (1 + csqnmaxsl * kmcsqn / (kmcsqn + Ca_jsr)^2)
    desc: Calcium concentration in the JSR subspace
dot(Ca_nsr) = serca.Jup1 + serca.Jup2 - (trans_flux.Jtr1 * vjsr / vnsr + trans_flux.Jtr2 * vcsr / vnsr)
    in [mM]
    desc: Calcium concentration in the NSR subspace
dot(Ca_csr) = buff * (trans_flux.Jtr2 - ryr.Jrel2)
    in [mM]
    buff = 1 / (1 + csqnmax * kmcsqn / (kmcsqn + Ca_csr)^2)

#
# Calcium flux between NSR and CSR
#
[trans_flux]
Jtr1 = (calcium.Ca_nsr - calcium.Ca_jsr) / 120 [ms]
    in [mM/ms]
Jtr2 = (calcium.Ca_nsr - calcium.Ca_csr) / 120 [ms]
    in [mM/ms]

#
# Active CaMKII subunits
# Supplement page 37, adapted from [2]
#
[camk]
aCaMK = 0.05 [1/ms]
    in [1/ms]
bCaMK = 0.00068 [1/ms]
    in [1/ms]
CaMKo = 0.05
KmCaM = 0.0015 [mM]
    in [mM]
KmCaMK = 0.15
bound = CaMKo * (1 - trapped) / (1 + KmCaM / calcium.Ca_ss)
    desc: Fraction of calmodulin-bound (and therefore) active subunits
dot(trapped) = aCaMK * bound * active - bCaMK * trapped
    desc: Fraction of subunits "trapped" in an active state
active = bound + trapped
    desc: Total fraction of active subunits
f = 1 / (1 + KmCaMK / active)
    desc: Fraction of phosphorylated subunits

[[protocol]]
# Level  Start    Length   Period   Multiplier
1        10       0.5      1000     0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Display the results
var = 'membrane.V'
plt.figure()
plt.plot(d.time(), d[var])
plt.title(var)
plt.show()

