[[model]]
name: paci-2020
version: 20230323
mmt_authors: Michael Clerx
display_name: Paci et al., 2020
desc: """
    Myokit version of the 2020 hIPSC model by Paci et al. [1].

    The equations in this model match the original Matlab code provided by
    the authors [2]. It was verified against the original code by comparing
    the calculated derivatives.

    In this implementation, units have been converted from V to mV, and s to
    ms. In addition, the capacitance has been converted to pF and two cell
    volumes have been converted to pL, which removes a few scaling factors
    from the equations.

    The 2020 model contains an If current adapted from [3].

    References:

    [1] Paci, M., Passini, E., Klimas, A., Severi, S., Hyttinen, J.,
        Rodriguez, B., & Entcheva, E. (2020). All-Optical Electrophysiology
        Refines Populations of In Silico Human iPSC-CMs for Drug Evaluation.
        Biophysical Journal, 118(10), pages 2596-2611.
        https://doi.org/10.1016/j.bpj.2020.03.018

    [2] https://www.mcbeng.it/en/downloads/software/paci2020.html

    [3] Koivumäki, J. T., Naumenko, N., Tuomainen, T., Takalo, J., Oksanen, M.,
        Puttonen, K. A., Lehtonen, Š., Kuusisto, J., Laakso, M., Koistinaho,
        J., & Tavi, P. (2018). Structural Immaturity of Human iPSC-Derived
        Cardiomyocytes: In Silico Investigation of Effects on Function and
        Disease Modeling. Frontiers in Physiology, 9.
        https://doi.org/10.3389/fphys.2018.00080

"""
# Initial state
membrane.V   = -70
calcium.CaSR = 0.32
calcium.Cai  = 0.0002
sodium.Nai   = 9.2
ical.d       = 0
ical.f1      = 1
ical.f2      = 1
ical.fCa     = 1
ikr.xr1      = 0
ikr.xr2      = 1
iks.xs       = 0
ina.m        = 0
ina.h        = 0.75
ina.j        = 0.75
inal.mL      = 0
inal.hL      = 0.75
if.xf        = 0.1
ito.q        = 1
ito.r        = 0
irel.a       = 0.3
irel.o       = 0.9
irel.c       = 0.1

[engine]
time = 0 [ms]
    in [ms]
    bind time
pace = 0
    bind pace

#
# Stimulus current
#
[stimulus]
i_stim = engine.pace * amplitude / cell.Cm
    in [A/F]
amplitude = -550 [pA]
    in [pA]
# Amplitude was -550 in 2013, -750 in 2018

#
# Membrane potential
#
[membrane]
dot(V) = -(i_ion + stimulus.i_stim)
    in [mV]
    label membrane_potential
i_ion = (+ ik1.IK1 + ikr.IKr + iks.IKs + ito.Ito + if.If
         + ina.INa + inal.INaL + ibna.IbNa
         + ical.ICaL + ipca.IpCa + ibca.IbCa
         + inak.INaK
         + inaca.INaCa
        )
    in [A/F]
# INaL did not appear in the 2013 model
# Note: If here is the sum of IfNa and IfK

#
# Cell size
#
[cell]
Cm = 98.7109 [pF]
    in [pF]
V_SR = 0.58373 [pL]
    in [pL]
Vc = 8.8 [pL]
    in [pL]

#
# Physical constants
#
[phys]
R = 8314.472 [mJ/mol/K]
    in [mJ/mol/K]
T = 310 [K]
    in [K]
F = 96485.3415 [C/mol]
    in [C/mol]
RTF = R * T / F
    in [mV]
FRT = F / R / T
    in [1/mV]

#
# Reversal potentials
#
[rev]
use phys.RTF
ECa = 0.5 * RTF * log(extra.Cao / calcium.Cai)
    in [mV]
EK = RTF * log(extra.Ko / potassium.Ki)
    in [mV]
EKs = RTF * log((extra.Ko + PkNa * extra.Nao) / (potassium.Ki + PkNa * sodium.Nai))
    in [mV]
ENa = RTF * log(extra.Nao / sodium.Nai)
    in [mV]
PkNa = 0.03

#
# L-type calcium current
#
[ical]
use membrane.V
use phys.F, phys.FRT
use calcium.Cai, extra.Cao
dot(d) = (inf - d) / tau
    inf = 1 / (1 + exp(-(V + 9.1 [mV]) / 7 [mV]))
    a = 0.25 + 1.4 / (1 + exp((-V - 35 [mV]) / 13 [mV]))
    b = 1.4 [ms] / (1 + exp((V + 5 [mV]) / 5 [mV]))
        in [ms]
    c = 1 [ms] / (1 + exp((-V + 50 [mV]) / 20 [mV]))
        in [ms]
    tau = a * b + c
        in [ms]
dot(f1) = (inf - f1) / tau
    inf = 1 / (1 + exp((V + 26 [mV]) / 3 [mV]))
    # The 2013 and 2018 models had an extra square in the 2nd term:
    #                      exp(-((V + 27 [mV])^2 / 15 [mV^2])^2)
    tau = (20 [ms]
           + 1102.5 [ms] * exp(-((V + 27 [mV]) / 15 [mV])^2)
           + 200 [ms] / (1 + exp((13 [mV] - V) / 10 [mV]))
           + 180 [ms] / (1 + exp((30 [mV] + V) / 10 [mV]))
          ) * c
        in [ms]
    c = if(inf > f1, 1 + 1433 [1/mM] * (Cai - 50e-6 [mM]), 1)
dot(f2) = (inf - f2) / tau
    # 32 [mV] was 35 [mV] in the 2013 model
    inf = 0.33 + 0.67 / (1 + exp((V + 32 [mV]) / 4 [mV]))
    tau = (600 [ms] * exp(-(V + 25 [mV])^2 / 170 [mV^2])
           + 31 [ms] / (1 + exp((25 [mV] - V) / 10 [mV]))
           + 16 [ms] / (1 + exp((30 [mV] + V) / 10 [mV]))
          )
        in [ms]
dot(fCa) = e * (inf - fCa) / tau
    inf = (a + b + c) / 1.3156
    a = 1 / (1 + (Cai / 0.0006 [mM])^8)
    b = 0.1 / (1 + exp((Cai - 0.0009 [mM]) / 0.0001 [mM]))
    c = 0.3 / (1 + exp((Cai - 0.00075 [mM]) / 0.0008 [mM]))
    tau = 2 [ms]
        in [ms]
    e = if(V > -60 [mV] and inf > fCa, 0, 1)
P_CaL = 8.635702e-5 [L/F/ms]
    in [L/F/ms]
ICaL = P_CaL * d * f1 * f2 * fCa * if(V != 0 [mV], b, c)
    in [A/F]
    b = 4 * V * F * FRT * (Cai * exp(2 * V * FRT) - 0.341 * Cao) / (exp(2 * V * FRT) - 1)
        in [mM*C/mol]
    c = 2 * F * (Cai - 0.341 * Cao)
        in [mM*C/mol]

#
# IK1
#
[ik1]
use membrane.V
use rev.EK, extra.Ko
inf = alpha / (alpha + beta)
    alpha = 3.91 / (1 + exp(0.5942 [1/mV] * (V - EK - 200 [mV])))
    beta = (-1.509 * exp(0.0002 [1/mV] * (V - EK + 100 [mV])) + exp(0.5886 [1/mV] * (V - EK - 10 [mV]))) / (1 + exp(0.4547 [1/mV] * (V - EK)))
g = 0.0281492 [mS/uF]
    in [mS/uF]
IK1 = g * sqrt(Ko / 5.4 [mM]) * inf * (V - EK)
    in [A/F]

#
# IKr
#
[ikr]
use extra.Cao, extra.Ko
use membrane.V
dot(xr1) = (inf - xr1) / tau
    L0 = 0.025
    Q = 2.3
    V_half = -phys.RTF / Q * log((1 + Cao / 2.6 [mM])^4 / (L0 * (1 + Cao / 0.58 [mM])^4)) - 19 [mV]
        in [mV]
    inf = 1 / (1 + exp((V_half - V) / 4.9 [mV]))
    alpha = 450 [ms] / (1 + exp((-45 [mV] - V) / 10 [mV]))
        in [ms]
    beta = 6 / (1 + exp((30 [mV] + V) / 11.5 [mV]))
    tau = alpha * beta
        in [ms]
dot(xr2) = (inf - xr2) / tau
    inf = 1 / (1 + exp((V + 88 [mV]) / 50 [mV]))
    alpha = 3 [ms] / (1 + exp((-60 [mV] - V) / 20 [mV]))
        in [ms]
    beta = 1.12 / (1 + exp((-60 [mV] + V) / 20 [mV]))
    tau = alpha * beta
        in [ms]
g = 0.0298667 [mS/uF]
    in [mS/uF]
IKr = g * sqrt(Ko / 5.4 [mM]) * xr1 * xr2 * (V - rev.EK)
    in [A/F]

#
# IKs
#
[iks]
use membrane.V
dot(xs) = (inf - xs) / tau
    inf = 1 / (1 + exp((-V - 20 [mV]) / 16 [mV]))
    alpha = 1100 [ms] / sqrt(1 + exp((-10 [mV] - V) / 6 [mV]))
        in [ms]
    beta = 1 / (1 + exp((-60 [mV] + V) / 20 [mV]))
    tau = alpha * beta
        in [ms]
g = 0.002041 [mS/uF]
    in [mS/uF]
k = 1 + 0.6 / (1 + (3.8e-5 [mM] / calcium.Cai)^1.4)
IKs = g * xs^2 * k * (V - rev.EKs)
    in [A/F]

#
# Funny current, haha!
# This If formulation differs completely from 2018 and is adapted from [3].
#
[if]
use membrane.V
dot(xf) = (inf - xf) / tau
    inf = 1 / (1 + exp((V + 69 [mV]) / 8 [mV]))
    tau = 5600 [ms] / (1 + exp((V + 65 [mV]) / 7 [mV]) + exp(-(V + 65 [mV]) / 19 [mV]))
        in [ms]
g = 0.0222763088 [mS/uF]
    in [mS/uF]
fNa = 0.37
fK = 1 - fNa
If_K = fK * g * xf * (V - rev.EK)
    in [A/F]
If_Na = fNa * g * xf * (V - rev.ENa)
    in [A/F]
If = If_K + If_Na
    in [A/F]

#
# Ito
#
[ito]
use membrane.V
dot(q) = (inf - q) / tau
    inf = 1 / (1 + exp((V + 53 [mV]) / 13 [mV]))
    tau = 6.06 [ms] + 39.102 [ms] / (
            0.57 * exp(-0.08 [1/mV] * (V + 44 [mV]))
            + 0.065 * exp(0.1 [1/mV] * (V + 45.93 [mV]))
          )
        in [ms]
dot(r) = (inf - r) / tau
    inf = 1 / (1 + exp(-(V - 22.3 [mV]) / 18.75 [mV]))
    tau = 2.75352 [ms] + 14.40516 [ms] / (1.037 * exp(0.09 [1/mV] * (V + 30.61 [mV])) + 0.369 * exp(-0.12 [1/mV] * (V + 23.84 [mV])))
        in [ms]
g = 0.0299038 [mS/uF]
    in [mS/uF]
Ito = g * q * r * (V - rev.EK)
    in [A/F]

#
# INa
# The INa formulation in 2020 is completely different from before
#
[ina]
desc: INa adapted from DOI:10.3389/fphys.2018.00080
use membrane.V
dot(m) = (inf - m) / tau
    inf = 1 / (1 + exp((V + 39 [mV]) / - 11.2 [mV]))
    tau = (+ 0.01 [ms]
           + 0.13 [ms] * exp(-((V + 48 [mV]) / 15 [mV])^2)
           + 0.045 [ms] / (1 + exp((V + 42 [mV]) / -5 [mV])))
        in [ms]
h_inf = 1 / (1 + exp((V + 66.5 [mV]) / 6.8 [mV]))
dot(h) = (h_inf - h) / tau
    tau = (0.07 [ms]
           + 34 [ms] / (1 + exp((V + 41 [mV]) / 5.5 [mV]) + exp(-(V + 41 [mV]) / 14 [mV]))
           + 0.2 [ms] / (1 + exp(-(V + 79 [mV]) / 14 [mV])))
        in [ms]
dot(j) = (h_inf - j) / tau
    tau = 10 * (0.7 [ms]
                + 150 [ms] / (1 + exp((V + 41 [mV]) / 5.5 [mV]) + exp(-(V + 41 [mV]) / 14 [mV]))
                + 2 [ms] / (1 + exp(-(V + 79 [mV]) / 14 [mV])))
        in [ms]
g = 6.4471896 [mS/uF]
    in [mS/uF]
INa = g * m^3 * h * j * (V - rev.ENa)
    in [A/F]

#
# INaL
# INaL was added in the 2018 model
#
[inal]
use membrane.V
dot(mL) = (inf - mL) / tau
    inf = 1 / (1 + exp(-(V + 42.85 [mV]) / 5.264 [mV]))
    alpha = 1 [ms] / (1 + exp((-60 [mV] - V) / 5 [mV]))
        in [ms]
    beta = 0.1 / (1 + exp((V + 35 [mV]) / 5 [mV])) + 0.1 / (1 + exp((V - 50 [mV]) / 200 [mV]))
    tau = alpha * beta
        in [ms]
dot(hL) = (inf - hL) / tau
    inf = 1 / (1 + exp((V + 87.61 [mV]) / 7.488 [mV]))
    tau = 200 [ms]
        in [ms]
g = 2.3e-3 * 7.5 [mS/uF]
    in [mS/uF]
INaL = g * mL^3 * hL * (V - rev.ENa)
    in [A/F]

#
# INaCa
#
[inaca]
use membrane.V
use phys.FRT
use sodium.Nai, extra.Nao
use calcium.Cai, extra.Cao
KmCa = 1.38 [mM]
    in [mM]
KmNai = 87.5 [mM]
    in [mM]
Ksat = 0.1
# Alpha was 2.8571432 in 2013, 2.5371 in 2018
alpha = 2.16659
gamma = 0.35
# kNaCa was 4900 in 2013, 3917.0463 in 2018
kNaCa = 6514.47574 [A/F]
    in [A/F]
INaCa = kNaCa * numer / denom
    in [A/F]
    numer = exp(gamma * V * FRT) * Nai^3 * Cao - exp((gamma - 1) * V * FRT) * Nao^3 * Cai * alpha
        in [mM^4]
    denom = (KmNai^3 + Nao^3) * (KmCa + Cao) * (1 + Ksat * exp((gamma - 1) * V * FRT))
        in [mM^4]

#
# INaK
#
[inak]
use membrane.V
use extra.Ko, sodium.Nai
use phys.FRT
Km_K = 1 [mM]
    in [mM]
Km_Na = 40 [mM]
    in [mM]
# PNaK was 1.841424 in 2013, 2.6351 in 2018
PNaK = 2.74240 [A/F]
    in [A/F]
INaK = PNaK * Ko / (Ko + Km_K) * Nai / (Nai + Km_Na) / (1 + 0.1245 * exp(-0.1 * V * FRT) + 0.0353 * exp(-V * FRT))
    in [A/F]

#
# IpCa
#
[ipca]
KpCa = 0.0005 [mM]
    in [mM]
g = 0.4125 [A/F]
    in [A/F]
IpCa = g * calcium.Cai / (calcium.Cai + KpCa)
    in [A/F]

#
# Background calcium current
#
[ibca]
# g was 6.9264e-4 in 2013, 7.27272e-4 in 2018
g = 8.727264e-4 [mS/uF]
    in [mS/uF]
IbCa = g * (membrane.V - rev.ECa)
    in [A/F]

#
# Background sodium current
#
[ibna]
# g was 9e-4 in 2013, 9.5e-4 in 2018
g = 1.14e-3 [mS/uF]
    in [mS/uF]
IbNa = g * (membrane.V - rev.ENa)
    in [A/F]

#
# Internal potassium concentration
#
[potassium]
Ki = 150 [mM]
    in [mM]

#
# Internal sodium concentration
#
[sodium]
use cell.Cm, cell.Vc, phys.F
dot(Nai) = -(ina.INa + inal.INaL + ibna.IbNa + 3 * inak.INaK + 3 * inaca.INaCa + if.If_Na) * Cm / (F * Vc)
    in [mM]

#
# Ryanodine release receptors
# This is a completely different formulation than in the 2013 model.
#
[irel]
use calcium.Cai, calcium.CaSR
dot(a) = (inf - a) / 1000 [ms]
    in [uM]
    inf = a1 - a2 / (1 + exp((1000 [uM/mM] * Cai - ahalf) / 0.0082 [uM]))
        in [uM]
    # a1 was 0.05354 in 2018
    a1 = 0.05169 [uM]
        in [uM]
    # a2 was 0.0488 in 2018
    a2 = 0.050001 [uM]
        in [uM]
    # ahalf was 0.02427 in 2018
    ahalf = 0.02632 [uM]
        in [uM]
dot(o) = (inf - o) / tau
    inf = 1 - 1 / (1 + exp((1000 [uM/mM] * Cai - (a + ohalf)) / 0.003 [uM]))
    tau = if(o < inf, 1, 0.1) * 18.75 [ms]
        in [ms]
    # ohalf was 0.01042 in 2018
    ohalf = 0.00944 [uM]
        in [uM]
dot(c) = (inf - c) / tau
    inf = 1 / (1 + exp((1000 [uM/mM] * Cai - (a + chalf)) / 0.001 [uM]))
    tau = if(c < inf, 2, 1) * 87.5 [ms]
        in [ms]
    # chalf was 0.00144 in 2018
    chalf = 0.00167 [uM]
        in [uM]
SRCass = 1 - 1 / (1 + exp((CaSR - 0.3 [mM]) / 0.1 [mM]))
# g_max was 0.0625434 in 2018
g_max = 0.055808061 [1/ms]
    in [1/ms]
i_rel = g_max * SRCass * o * c * (CaSR - Cai)
    in [mM/ms]

#
# Ca uptake into SR
#
[iup]
use calcium.Cai
# Kup was 2.5e-4 in 2013, 3.1928e-4 in 2018
Kup = 4.40435e-4 [mM]
    in [mM]
# VmaxUp was 5.6064e-4 in 2013, 5.113e-4 in 2018
VmaxUp = 8.2205e-4 [mM/ms]
    in [mM/ms]
i_up = VmaxUp / (1 + Kup^2 / Cai^2)
    in [mM/ms]

#
# Ca leak from SR
#
[ileak]
use calcium.Cai, calcium.CaSR
# V_leak was 4.4444e-7 in 2013, 4.7279e-7 in 2018
V_leak = 4.48209e-7 [1/ms]
    in [1/ms]
i_leak = (CaSR - Cai) * V_leak
    in [mM/ms]

#
# Internal calcium concentrations
#
[calcium]
use membrane.V
use cell.Vc, cell.V_SR
use iup.i_up, irel.i_rel, ileak.i_leak
Buf_C = 0.25 [mM]
    in [mM]
Buf_SR = 10 [mM]
    in [mM]
Kbuf_C = 0.001 [mM]
    in [mM]
Kbuf_SR = 0.3 [mM]
    in [mM]
CaSR_bufSR = 1 / (1 + Buf_SR * Kbuf_SR / (CaSR + Kbuf_SR)^2)
Cai_bufc = 1 / (1 + Buf_C * Kbuf_C / (Cai + Kbuf_C)^2)
dot(CaSR) = CaSR_bufSR * (Vc / V_SR) * (i_up - i_rel - i_leak)
    in [mM]
dot(Cai) = Cai_bufc * (i_leak - i_up + i_rel - (ical.ICaL + ibca.IbCa + ipca.IpCa - 2 * inaca.INaCa) * cell.Cm / (2 * Vc * phys.F))
    in [mM]

#
# Extracellular concentrations
#
[extra]
Cao = 1.8 [mM]
    in [mM]
Nao = 151 [mM]
    in [mM]
Ko = 5.4 [mM]
    in [mM]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1        0        5        1000     0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Display the results
plt.figure()
plt.xlabel('Time (ms)')
plt.ylabel('Membrane potential (mV)')
plt.plot(d.time(), d['membrane.V'])
plt.show()

