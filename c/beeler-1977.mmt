[[model]]
name: beeler-1977
version: 20230202
mmt_authors: Michael Clerx
desc: """
    The 1977 model of the AP in mammalian ventricular myocardial fibers by
    Beeler and Reuter [1].

    References:

    [1] Beeler, G.W. & Reuter, H. (1977).
        Reconstruction of the action potential of ventricular myocardial
        fibres.
        The Journal of Physiology, 268(1), 177-210.
        https://doi.org/10.1113/jphysiol.1977.sp011853

    """
# Initial values:
membrane.V  = -84.622
calcium.Cai = 2e-7
ina.m       = 0.01
ina.h       = 0.99
ina.j       = 0.98
isi.d       = 0.003
isi.f       = 0.99
ix1.x1      = 0.0004

#
# Simulation variables
#
[engine]
time = 0 [ms]
    in [ms]
    bind time
pace = 0
    bind pace

#
# Membrane potential
#
[membrane]
C = 1 [uF/cm^2]
    in [uF/cm^2]
dot(V) = -(1/C) * (i_ion + stimulus.i_stim)
    in [mV]
    label membrane_potential
i_ion = ik1.IK1 + ix1.Ix1 + ina.INa + isi.Isi
    in [uA/cm^2]
    label cellular_current

#
# Stimulus current
#
[stimulus]
i_stim = engine.pace * amplitude
    in [uA/cm^2]
amplitude = -25 [uA/cm^2]
    in [uA/cm^2]

#
# Fast sodium current
#
[ina]
use membrane.V as V
gNaBar = 4 [mS/cm^2]
    in [mS/cm^2]
gNaC = 0.003 [mS/cm^2]
    in [mS/cm^2]
ENa = 50 [mV]
    in [mV]
INa = (gNaBar * m^3 * h * j + gNaC) * (V - ENa)
    in [uA/cm^2]
    desc: The excitatory inward sodium current
dot(m) =  alpha * (1 - m) - beta * m
    alpha = 1 [1/mV/ms] * (V + 47 [mV]) / (1 - exp(-0.1 [1/mV] * (V + 47 [mV])))
        in [1/ms]
    beta  = 40 [1/ms] * exp(-0.056 [1/mV] * (V + 72 [mV]))
        in [1/ms]
dot(h) =  alpha * (1 - h) - beta * h
    alpha = 0.126 [1/ms] * exp(-0.25 [1/mV] * (V + 77 [mV]))
        in [1/ms]
    beta  = 1.7 [1/ms] / (1 + exp(-0.082 [1/mV] * (V + 22.5 [mV])))
        in [1/ms]
dot(j) =  alpha * (1 - j) - beta * j
    alpha = 0.055 [1/ms] * exp(-0.25 [1/mV] * (V + 78 [mV])) / (1 + exp(-0.2 [1/mV] * (V + 78 [mV])))
        in [1/ms]
    beta  = 0.3 [1/ms] / (1 + exp(-0.1 [1/mV] * (V + 32 [mV])))
        in [1/ms]

#
# Slow/secondary inward current (ICaL)
#
[isi]
use membrane.V as V
gsBar = 0.09 [mS/cm^2]
    in [mS/cm^2]
Es = -82.3 [mV] - 13.0287 [mV] * log(calcium.Cai * 1 [L/mol])
    in [mV]
Isi = gsBar * d * f * (V - Es)
    in [uA/cm^2]
dot(d) =  alpha * (1 - d) - beta * d
    alpha = 0.095 [1/ms] * exp(-0.01 [1/mV] * (V + -5 [mV])) / (exp(-0.072 [1/mV] * (V + -5 [mV])) + 1)
        in [1/ms]
    beta  = 0.07 [1/ms] * exp(-0.017 [1/mV] * (V + 44 [mV])) / (exp(0.05 [1/mV] * (V + 44 [mV])) + 1)
        in [1/ms]
dot(f) = alpha * (1 - f) - beta * f
    alpha = 0.012 [1/ms] * exp(-0.008 [1/mV] * (V + 28 [mV])) / (exp(0.15 [1/mV] * (V + 28 [mV])) + 1)
        in [1/ms]
    beta  = 0.0065 [1/ms] * exp(-0.02 [1/mV] * (V + 30 [mV])) / (exp(-0.2 [1/mV] * (V + 30 [mV])) + 1)
        in [1/ms]

#
# Intracellular (bulk) calcium
#
[calcium]
dot(Cai) = -1e-7 [mol/uC/cm] * isi.Isi + 0.07 [1/ms] * (1e-7 [mol/L] - Cai)
    in [mol/L]

#
# Inward rectifier current (IK1)
#
[ik1]
use membrane.V as V
IK1 = 0.35 [uA/cm^2] * (
        4 * (exp(0.04 [1/mV] * (V + 85 [mV])) - 1)
        / (exp(0.08 [1/mV] * (V + 53 [mV])) + exp(0.04 [1/mV] * (V + 53 [mV])))
        + 0.2 [1/mV] * (V + 23 [mV])
        / (1 - exp(-0.04 [1/mV] * (V + 23 [mV])))
    )
    in [uA/cm^2]

#
# "A voltage- and time-dependent outward current, primarily carried by
# potassium ions"
#
[ix1]
use membrane.V as V
Ix1 = x1 * 0.8 [uA/cm^2] * (exp(0.04 [1/mV] * (V + 77 [mV])) - 1) / exp(0.04 [1/mV] * (V + 35 [mV]))
    in [uA/cm^2]
    desc: """"""
dot(x1) = alpha * (1 - x1) - beta * x1
    alpha = 0.0005 [1/ms] * exp(0.083 [1/mV] * (V + 50 [mV])) / (exp(0.057 [1/mV] * (V + 50 [mV])) + 1)
        in [1/ms]
    beta  = 0.0013 [1/ms] * exp(-0.06 [1/mV] * (V + 20 [mV])) / (exp(-0.04 [1/mV] * (V + 333 [mV])) + 1)
        in [1/ms]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      100      2        1000     0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Display the result
plt.figure()
plt.xlabel('Time (ms)')
plt.ylabel('Membrane potential (mV)')
plt.plot(d.time(), d['membrane.V'])
plt.show()

