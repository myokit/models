[[model]]
name: voigt-2013
version: 20251006
mmt_authors: Henry Sutanto, Jordi Heijman, Michael Clerx
display_name: Voigt-Heijman et al., 2013
desc: """
    The 2013 model of the human atrial AP by Voigt & Heijman et al. [1].

    The model is based on the atrial model by Grandi et al. [2], but with an
    added IK,ACh current adapted from [3], the INa current from [4], and
    modifications to IK1 and its dependence on the external potassium
    concentration.

    This implementation was adapted (reformatting only) from mmt code provided
    by Henry Sutanto and Jordi Heijman.

    The stimulus was set to 0.5 [ms] and approximately twice the threshold
    value for depolarisation.

    [1] *Voigt, N., *Heijman, J., Trausch, A., Mintert-Jancke, E., Pott, L.,
        Ravens, U., & Dobrev, D. (2013). *Shared first authors. Impaired
        Na+-dependent regulation of acetylcholine-activated inward-rectifier
        K+ current modulates action potential rate dependence in patients with
        chronic atrial fibrillation. Journal of Molecular and Cellular
        Cardiology, 61, 142-152.
        https://doi.org/10.1016/j.yjmcc.2013.03.011

    [2] *Grandi, E., *Pandit, S. V., *Voigt, N., Workman, A. J., Dobrev, D.,
        Jalife, J., & Bers, D. M. (2011). *Shared first authors. Human Atrial
        Action Potential and Ca2+ Model: Sinus Rhythm and Chronic Atrial
        Fibrillation. Circulation Research, 109(9), 1055-1066.
        https://doi.org/10.1161/CIRCRESAHA.111.253955

    [3] Kneller, J., Zou, R., Vigmond, E. J., Wang, Z., Leon, L. J., & Nattel,
        S. (2002). Cholinergic Atrial Fibrillation in a Computer Model of a
        Two-Dimensional Sheet of Canine Atrial Cells With Realistic Ionic
        Properties. Circulation Research, 90, e73-e87.
        https://doi.org/10.1161/01.RES.0000019783.88094.BA

    [4] Courtemanche, M., Ramirez, R. J., & Nattel, S. (1998). Ionic mechanisms
        underlying human atrial action potential properties: insights from a
        mathematical model. American Journal of Physiology. Heart and
        Circulatory Physiology, 275(1), H301-H321.
        https://doi.org/10.1152/ajpheart.1998.275.1.H301

    """
# Initial values
membrane.V    = -7.52780471692306037e+01
ina.m         =  7.59453049632579334e-03
ina.h         =  8.78505103144280208e-01
ina.j         =  9.00209123492175745e-01
ical.d        =  1.59458130724611627e-05
ical.f        =  9.98823526417754515e-01
ical.fCa_jn   =  4.26497677597966543e-02
ical.fCa_sl   =  3.15166170008387703e-02
ito.x         =  1.16663120440083567e-03
ito.y         =  9.53584386702177933e-01
ikr.x         =  4.16676562552724047e-03
iks.x         =  6.58887843809772590e-03
ikur.r        =  3.17439462334348846e-04
ikur.s        =  9.63905998957158006e-01
inal.ml       =  7.59453049632577946e-03
inal.hl       =  5.46474622118938921e-02
ryr.r         =  8.05792392544750546e-01
ryr.o         =  1.75758472762565780e-06
ryr.i         =  4.23598555065914894e-07
nabss.NaB_jn  =  3.66094128952013209e+00
nabss.NaB_sl  =  7.98881054887683906e-01
cabct.TnCL    =  1.77701075765371030e-02
cabct.TnCHCa  =  1.27450321466254624e-01
cabct.TnCHMg  =  5.88979909601678852e-03
cabct.CaM     =  6.75680225196550327e-04
cabct.MyoCa   =  3.81021381764585967e-03
cabct.MyoMg   =  1.35677287246854933e-01
cabct.SRB     =  4.32351745169851694e-03
cabss.SLL_jn  =  1.28879999635486964e-02
cabss.SLL_sl  =  2.06097397421413815e-02
cabss.SLH_jn  =  1.01054654245846157e-01
cabss.SLH_sl  =  1.86564033594046219e-01
cabsr.Csqn    =  1.11327791288833455e+00
cabsr.Ca_sr   =  4.86729156697473297e-01
sodium.Na_jn  =  9.37974113098751516e+00
sodium.Na_sl  =  9.38074263279777298e+00
sodium.Na_i   =  9.38099413523025305e+00
calcium.Ca_jn =  3.09194296213754854e-04
calcium.Ca_sl =  2.24203532722365157e-04
calcium.Ca_i  =  2.02663205772546145e-04

#
# Simulation
#
[engine]
time = 0 [ms]
    in [ms]
    bind time
pace = 0
    bind pace

#
# Model modes
#
[mode]
AF = 0
    desc: Atrial fibrillation remodelling yes/no

#
# Membrane potential
#
[membrane]
use stimulus.i_stim
dot(V) = -(i_ion + i_stim + i_diff)
    in [mV]
    label membrane_potential
i_ion = sodium.INa_tot + chloride.ICl_tot + calcium.ICa_tot + potassium.IK_tot
    in [A/F]
    label cellular_current
i_diff = 0 [A/F]
    in [A/F]
    bind diffusion_current

#
# Stimulus current
#
[stimulus]
i_stim = engine.pace * amplitude
    in [A/F]
    label stimulus_current
    desc: """
        Under baseline conditions, at 1Hz with a 0.5ms stimulus, -24.10 pA is
        approximately the smallest value that triggers three successive APs.
        """
amplitude = 2 * -25 [A/F]
    in [A/F]

#
# Physical constants
#
[phys]
F = 96485 [C/mol]
    in [C/mol]
R = 8314 [J/kmol/K]
    in [J/kmol/K]
T = 310 [K]
    in [K]
RTF = R * T / F
    in [mV]
FRT = F / (R * T)
    in [1/mV]
Q = (T - 310 [K]) / 10 [K]

#
# Cell geometry
#
[cell]
C = 1.381e-10 [F]   # Increased from Grandi
    in [F]
    label membrane_capacitance
length = 100 [um]
    in [um]
radius = 10.25 [um]
    in [um]
pi = 3.14159265358979312    # Two extra digits compared to grandi
Vcell = pi * radius^2 * length * 1e-15 [L/um^3]
    in [L]
Vmyo = 0.65 * Vcell
    in [L]
    desc: Volume of the bulk myoplasm
Vsr = 0.035 * Vcell
    in [L]
    desc: Volume of the sarcoplasmic reticulum
Vjn = 0.0539 * 0.01 * Vcell
    in [L]
    desc: Volume of the junctional cleft compartment
Vsl = 0.02 * Vcell
    in [L]
    desc: Volume of the subsarcolemmal compartment
fjn = 0.11 : Fraction of currents in junctional compartment
fsl = 1 - fjn : Fraction of currents in subsarcolemmal compartment
fjn_CaL = 0.9 : Fraction of ICaL in junctional compartment
fsl_CaL = 1 - fjn_CaL : Fraction of ICaL in subsarcolemmal compartment

#
# Fixed ion concentrations
#
[ion]
Na_o = 140 [mM] : Extracellular Na
    in [mM]
K_o = 5.4 [mM] : Extracellular K
    in [mM]
    label K_o
K_i = 120 [mM] : Intracellular K
    in [mM]
Ca_o = 1.8 [mM] : Extracellular Ca
    in [mM]
Cl_i = 15 [mM] : Intracellular Cl
    in [mM]
Cl_o = 150 [mM] : Extracellular Cl
    in [mM]
Mg_i = 1 [mM] : Intracellular Mg
    in [mM]

#
# Reversal potentials
#
[rev]
use phys.RTF
ENa_jn = RTF * log(ion.Na_o / sodium.Na_jn)
    in [mV]
ENa_sl = RTF * log(ion.Na_o / sodium.Na_sl)
    in [mV]
ECa_jn = 0.5 * RTF * log(ion.Ca_o / calcium.Ca_jn)
    in [mV]
ECa_sl = 0.5 * RTF * log(ion.Ca_o / calcium.Ca_sl)
    in [mV]
ECl = RTF * log(ion.Cl_i / ion.Cl_o)
    in [mV]
EK = RTF * log(ion.K_o / ion.K_i)
    in [mV]
EKs = RTF * log((ion.K_o + pNaK * ion.Na_o) / (ion.K_i + pNaK * sodium.Na_i))
    in [mV]
pNaK = 0.01833

#
# Fast sodium current (from Courtemanche 1998)
#
[ina]
use membrane.V
INa = INa_jn + INa_sl
    in [A/F]
    label I_Na
INa_jn = cell.fjn * gNa * m^3 * h * j * (V - rev.ENa_jn)
    in [A/F]
INa_sl = cell.fsl * gNa * m^3 * h * j * (V - rev.ENa_sl)
    in [A/F]
gNa = 23 [mS/uF]
    in [mS/uF]
dot(m) = (inf - m) / tau
    alpha = if(V == -47.13 [mV], 3.2 [1/ms], 0.32 [1/mV/ms] * (V + 47.13 [mV]) / (1 - exp(-0.1 [1/mV] * (V + 47.13 [mV]))))
        in [1/ms]
    beta = 0.08 [1/ms] * exp(-V / 11 [mV])
        in [1/ms]
    inf = alpha / (alpha + beta)
    tau = 1 / (alpha + beta)
        in [ms]
dot(h) = (inf - h) / tau
    alpha = if(V < -40 [mV], 0.135 [1/ms] * exp((V + 80 [mV]) / -6.8 [mV]), 0 [1/ms])
        in [1/ms]
    beta = if(V < -40 [mV], 3.56 [1/ms] * exp(0.079 [1/mV] * V) + 310000 [1/ms] * exp(0.35 [1/mV] * V), 1 / (0.13 [ms] * (1 + exp((V + 10.66 [mV]) / -11.1 [mV]))))
        in [1/ms]
    inf = alpha / (alpha + beta)
    tau = 1/ (alpha + beta)
        in [ms]
dot(j) = (inf - j) / tau
    alpha = if(V < -40 [mV], (-127140[1/mV/ms] * exp(0.2444 [1/mV] * V) - 3.474e-05 [1/mV/ms] * exp(-0.04391 [1/mV] * V)) * (V + 37.78 [mV]) / (1+ exp(0.311 [1/mV] * (V + 79.23 [mV]))), 0[1/ms])
        in [1/ms]
    beta = if(V < -40 [mV], 0.1212 [1/ms] * exp(-0.01052 [1/mV] * V) / (1+ exp(-0.1378 [1/mV] * (V + 40.14 [mV]))), 0.3 [1/ms] * exp(-2.535e-07 [1/mV] * V) / (1 + exp(-0.1 [1/mV] * (V + 32[mV]))))
        in [1/ms]
    inf = alpha / (alpha + beta)
    tau = 1 / (alpha + beta)
        in [ms]

#
# Late sodium current
#
[inal]
use membrane.V
INaL = INaL_jn + INaL_sl
    in [A/F]
    label I_NaL
INaL_jn = cell.fjn * gNaL * ml^3 * hl * (V - rev.ENa_jn)
    in [A/F]
INaL_sl = cell.fsl * gNaL * ml^3 * hl * (V - rev.ENa_sl)
    in [A/F]
gNaL = gNaL_base * mode.AF
    in [mS/uF]
gNaL_base = 0.0025 [mS/uF]
    in [mS/uF]
dot(ml) = a * (1 - ml) - b * ml
    a = 0.32 [1/ms/mV] * (V + 47.13 [mV]) / (1 - exp(-0.1 [1/mV] * (V + 47.13 [mV])))
        in [1/ms]
    b = 0.08 [1/ms] * exp(-V / 11 [mV])
        in [1/ms]
dot(hl) = (inf - hl) / tau
    inf = 1 / (1 + exp((V + 91 [mV]) / 6.1 [mV]))
    tau = 600 [ms]
        in [ms]

#
# Background sodium current
#
[inab]
INaB = INaB_jn + INaB_sl
    in [A/F]
    label I_NaB
INaB_jn = cell.fjn * gNaB * (membrane.V - rev.ENa_jn)
    in [A/F]
INaB_sl = cell.fsl * gNaB * (membrane.V - rev.ENa_sl)
    in [A/F]
gNaB = 0.597e-3 [mS/uF]
    in [mS/uF]

#
# Sodium-potassium pump current
#
[inak]
use membrane.V, phys.FRT
use ion.K_o, sodium.Na_jn, sodium.Na_sl
INaK = INaK_jn + INaK_sl
    in [A/F]
    label I_NaK
INaK_jn = cell.fjn * IbarNaK * fnak * K_o / (1 + (KmNai / Na_jn)^4) / (K_o + KmKo)
    in [A/F]
INaK_sl = cell.fsl * IbarNaK * fnak * K_o / (1 + (KmNai / Na_sl)^4) / (K_o + KmKo)
    in [A/F]
IbarNaK = 1.26 [A/F]
    in [A/F]
fnak = 1 / (1 + 0.1245 * exp(-0.1 * V * FRT) + 0.0365 * sigma * exp(-V * FRT))
    sigma = (exp(ion.Na_o / 67.3 [mM]) - 1) / 7
KmKo = 1.5 [mM]
    in [mM]
KmNai = 11 [mM]
    in [mM]

#
# Rapidly activating potassium current
#
[ikr]
use membrane.V
IKr = gKr * sqrt(ion.K_o / 5.4 [mM]) * x * r * (V - rev.EK)
    in [A/F]
    label I_Kr
gKr = 0.035 [mS/uF]
    in [mS/uF]
    label g_Kr
dot(x) = (inf - x) / tau
    inf = 1 / (1 + exp(-(V + 10 [mV]) / 5 [mV]))
    tau = (+ 550 [ms] / (1 + exp((-22 [mV] - V) / 9 [mV])) * 6 / (1 + exp((V + 11 [mV]) / 9 [mV]))
           + 230 [ms] / (1 + exp((V + 40 [mV]) / 20 [mV])))
        in [ms]
r = 1 / (1 + exp((V + 74 [mV]) / 24 [mV]))

#
# Slowly activating potassium current
#
[iks]
use membrane.V
IKs = IKs_jn + IKs_sl
    in [A/F]
IKs_jn = cell.fjn * gKs * x^2 * (V - rev.EKs)
    in [A/F]
IKs_sl = cell.fsl * gKs * x^2 * (V - rev.EKs)
    in [A/F]
gKs = (1 + mode.AF) * gKs_base
    in [mS/uF]
gKs_base = 0.0035 [mS/uF]
    in [mS/uF]
dot(x) = (inf - x) / tau
    inf = 1 / (1 + exp(-(V + 3.8 [mV]) / 14.25 [mV]))
    tau = 990.1 [ms] / (1 + exp(-(V + 2.436 [mV]) / 14.12 [mV]))
        in [ms]

#
# Plateau potassium current
#
[ikp]
use membrane.V
IKp = IKp_jn + IKp_sl
    in [A/F]
IKp_jn = cell.fjn * gKp * kp * (V - rev.EK)
    in [A/F]
IKp_sl = cell.fsl * gKp * kp * (V - rev.EK)
    in [A/F]
gKp = 0.002 [mS/uF]
    in [mS/uF]
kp = 1 / (1 + exp(7.488 - V / 5.98 [mV]))

#
# Transient outward potassium current
#
[ito]
use membrane.V
Ito = gto * x * y * (V - rev.EK)
    in [A/F]
    label I_to
gto = (1 - 0.7 * mode.AF) * gto_base
    in [mS/uF]
gto_base = 0.165 [mS/uF]
    in [mS/uF]
dot(x) = (inf - x) / tau
    inf = 1 / (1 + exp(-(V + 1 [mV]) / 11 [mV]))
    tau = 3.5 [ms] * exp(-(V / 30 [mV])^2) + 1.5 [ms]
        in [ms]
dot(y) = (inf - y) / tau
    inf = 1 / (1 + exp((V + 40.5 [mV]) / 11.5 [mV]))
    tau = 25.635 [ms] * exp(-((V + 52.45 [mV]) / 15.8827 [mV])^2) + 24.14 [ms]
        in [ms]

#
# Ultra rapid delayed rectifier outward potassium current
#
[ikur]
use membrane.V
IKur = gKur * r * s * (V - rev.EK)
    in [A/F]
    label I_Kur
gKur = (1 - 0.5 * mode.AF) * gKur_base  # Corresponds to LA Grandi parameters
    in [mS/uF]
gKur_base = 0.045 [mS/uF]
    in [mS/uF]
    label g_Kur
dot(r) = (inf - r) / tau
    inf = 1 / (1 + exp((V + 6 [mV]) / -8.6 [mV]))
    tau = 9 [ms] / (1 + exp((V + 5 [mV]) / 12 [mV])) + 0.5 [ms]
        in [ms]
dot(s) = (inf - s) / tau
    inf = 1 / (1 + exp( (V + 7.5 [mV]) / 10 [mV]))
    tau = 590 [ms] / (1 + exp((V + 60 [mV]) / 10 [mV])) + 3050 [ms]
        in [ms]

#
# Inward recitifer potassium current
# a_fact and IK1_fact are new.
#
[ik1]
use membrane.V, rev.EK
IK1 = factor * gK1 * inf * (V - EK)
    in [A/F]
    label I_K1
factor = 2.1
gK1 = (1 + mode.AF) * sqrt(ion.K_o / 5.4 [mM]) * gK1_base
    in [mS/uF]
gK1_base = 0.0525 [mS/uF]
    in [mS/uF]
inf = a / (a + b)
    a_fact = 0.1 [1/ms] + 0.9 [1/ms] / (1 + (sodium.Na_sl / 7 [mM])^2)
        in [1/ms]
    a = a_fact / (1 + exp(0.2385 [1/mV] * (V - EK - 59.215 [mV])))
        in [1/ms]
    b = 1 [1/ms] * (0.49124 * exp(0.08032 [1/mV] * (V - EK + 5.476 [mV]))
                     + exp(0.06175 [1/mV] * (V - EK - 594.31 [mV]))
                   ) / (1 + exp(-0.5143 [1/mV] * (V - EK + 4.753 [mV])))
        in [1/ms]

#
# Acetylcholine-activated K current
# Newly added.
#
[ikach]
use membrane.V
Na_dep = if(mode.AF < 1, (1 + 1.50 / (1 + (9 [mM] / sodium.Na_sl)^4)), 1) # No Na dependence in AF
CCh = 0
Constitutive_Frac = 0.0
    desc: constitutive IKACh fraction
Act = Constitutive_Frac + (1 - Constitutive_Frac) * CCh / (CCh + 0.125)
gKACh = 0.10 [mS/uF] - 0.05 [mS/uF] * mode.AF
    in [mS/uF]
IKACh = gKACh * Na_dep * Act * (0.055 + 0.40 / (1 + exp((V - rev.EK + 9.53 [mV]) / 17.18 [mV]))) * (V - rev.EK) * sqrt(ion.K_o / 5.4 [mM])
    in [A/F]

#
# Calcium activated chloride current
#
[iclca]
use membrane.V
IClCa = IClCa_jn + IClCa_sl
    in [A/F]
IClCa_jn = cell.fjn * gClCa / (1 + KdClCa / calcium.Ca_jn) * (V - rev.ECl)
    in [A/F]
IClCa_sl = cell.fsl * gClCa / (1 + KdClCa / calcium.Ca_sl) * (V - rev.ECl)
    in [A/F]
gClCa = 0.0548 [mS/uF]
    in [mS/uF]
KdClCa = 0.1 [mM]
    in [mM]

#
# Background chloride current
#
[iclb]
IClB = gClB * (membrane.V - rev.ECl)
    in [A/F]
gClB = 9e-3 [mS/uF]
    in [mS/uF]

#
# L-type calcium current
#
[ical]
use membrane.V
use phys.F, phys.FRT
use calcium.Ca_jn, calcium.Ca_sl, ion.Ca_o
use sodium.Na_jn, sodium.Na_sl, ion.Na_o
use ion.K_i, ion.K_o
use cell.fjn_CaL, cell.fsl_CaL
use mode.AF
ICaL = ICaL_Ca + ICaL_Na + ICaL_K
    in [A/F]
    label I_CaL
ICaL_Ca = ICaL_Ca_jn + ICaL_Ca_sl
    in [A/F]
ICaL_Ca_jn = fjn_CaL * ibarca_jn * d * f * (1 - fCa_jn) * Q
    in [A/F]
ICaL_Ca_sl = fsl_CaL * ibarca_sl * d * f * (1 - fCa_sl) * Q
    in [A/F]
ICaL_Na = ICaL_Na_jn + ICaL_Na_sl
    in [A/F]
ICaL_Na_jn = fjn_CaL * ibarna_jn * d * f * (1 - fCa_jn) * Q
    in [A/F]
ICaL_Na_sl = fsl_CaL * ibarna_sl * d * f * (1 - fCa_sl) * Q
    in [A/F]
ICaL_K = ibark * d * f * (fjn_CaL * (1 - fCa_jn) + fsl_CaL * (1 - fCa_sl)) * Q
    in [A/F]
# Permeability
scale = 1
    label g_CaL
PCa = scale * (1 - 0.5 * AF) * 2.7e-4 [L/F/ms]
    in [L/F/ms]
PNa = scale * (1 - 0.5 * AF) * 0.75e-8 [L/F/ms]
    in [L/F/ms]
PK = scale * (1 - 0.5 * AF) * 1.35e-7 [L/F/ms]
    in [L/F/ms]
Q10CaL = 1.8
Q = Q10CaL^phys.Q * 0.45
# Driving terms
ibarca_jn = PCa * 4 * V * F * FRT * (0.341 * Ca_jn * exp(2 * V * FRT) - 0.341 * Ca_o) / (exp(2 * V * FRT) - 1)
    in [A/F]
ibarca_sl = PCa * 4 * V * F * FRT * (0.341 * Ca_sl * exp(2 * V * FRT) - 0.341 * Ca_o) / (exp(2 * V * FRT) - 1)
    in [A/F]
ibarna_jn = PNa * V * F * FRT * (0.75 * Na_jn * exp(V * FRT) - 0.75 * Na_o) / (exp(V * FRT) - 1)
    in [A/F]
ibarna_sl = PNa * V * F * FRT * (0.75 * Na_sl * exp(V * FRT) - 0.75 * Na_o) / (exp(V * FRT) - 1)
    in [A/F]
ibark = PK * V * F * FRT * (0.75 * K_i * exp(V * FRT) - 0.75 * K_o) / (exp(V * FRT) - 1)
    in [A/F]
# Activation
dot(d) = (inf - d) / tau
    inf = 1 / (1 + exp(-(V + 9 [mV]) / 6 [mV]))
    tau = inf * (1 - exp(-(V + 9 [mV]) / 6 [mV])) / (0.035 [1/ms/mV] * (V + 9 [mV]))
        in [ms]
# Voltage-dependent inactivation
dot(f) = (inf - f) / tau
    inf = 1 / (1 + exp((V + 30 [mV]) / 7 [mV])) + 0.2 / (1 + exp((50 [mV] - V) / 20 [mV]))
    tau = 1 / (0.0197 [1/ms] * exp(-(0.0337 [1/mV] * (V + 25 [mV]))^2) + 0.02 [1/ms])
        in [ms]
# Calcium-dependent inactivation (gate = 1 minus these)
dot(fCa_jn) = 1.7 [1/mM/ms] * Ca_jn * (1 - fCa_jn) - 11.9e-3 [1/ms] * fCa_jn
dot(fCa_sl) = 1.7 [1/mM/ms] * Ca_sl * (1 - fCa_sl) - 11.9e-3 [1/ms] * fCa_sl

#
# Sodium/calcium exchanger current
#
[inaca]
use membrane.V
use phys.FRT
use sodium.Na_jn, sodium.Na_sl, ion.Na_o
use calcium.Ca_jn, calcium.Ca_sl, ion.Ca_o
INaCa = INaCa_jn + INaCa_sl
    in [A/F]
    label I_NaCa
INaCa_jn = cell.fjn * IbarNaCa * Q * Ka * (s1 - s2) / s3 / (1 + ksat * exp((nu - 1) * V * FRT))
    in [A/F]
    s1 = exp(nu * V * FRT) * Na_jn^3 * Ca_o
        in [mM^4]
    s2 = exp((nu - 1) * V * FRT) * Na_o^3 * Ca_jn
        in [mM^4]
    s3 = KmCai * Na_o^3 * (1 + (Na_jn / KmNai)^3) + KmNao^3 * Ca_jn * (1 + Ca_jn / KmCai) + KmCao * Na_jn^3 + Na_jn^3 * Ca_o + Na_o^3 * Ca_jn
        in [mM^4]
    Ka = 1 / (1 + (Kdact / Ca_jn)^2)
INaCa_sl = cell.fsl * IbarNaCa * Q * Ka * (s1 - s2) / s3 / (1 + ksat * exp((nu - 1) * V * FRT))
    in [A/F]
    s1 = exp(nu * V * FRT) * Na_sl^3 * Ca_o
        in [mM^4]
    s2 = exp((nu - 1) * V * FRT) * Na_o^3 * Ca_sl
        in [mM^4]
    s3 = KmCai * Na_o^3 * (1 + (Na_sl / KmNai)^3) + KmNao^3 * Ca_sl * (1 + Ca_sl / KmCai) + KmCao * Na_sl^3 + Na_sl^3 * Ca_o + Na_o^3 * Ca_sl
        in [mM^4]
    Ka = 1 / (1 + (Kdact / Ca_sl)^2)
IbarNaCa = (1 + 0.4 * mode.AF) * 3.15 [A/F]
    in [A/F]
Q10NaCa = 1.57
Q = Q10NaCa^phys.Q
Kdact = 0.384e-3 [mM]
    in [mM]
KmNai = 12.29 [mM]
    in [mM]
KmNao = 87.5 [mM]
    in [mM]
KmCai = 3.59e-3 [mM]
    in [mM]
KmCao = 1.3 [mM]
    in [mM]
ksat = 0.27
nu = 0.35

#
# Sarcolemmal calcium pump current
#
[ipca]
IpCa = IpCa_jn + IpCa_sl
    in [A/F]
IpCa_jn = cell.fjn * Q * IbarSLCaP * a / (a + b)
    in [A/F]
    a = (calcium.Ca_jn / 1 [mM])^1.6
IpCa_sl = cell.fsl * Q * IbarSLCaP * a / (a + b)
    in [A/F]
    a = (calcium.Ca_sl / 1 [mM])^1.6
b = (KmPCa / 1 [mM])^1.6
KmPCa = 0.0005 [mM]
    in [mM]
IbarSLCaP = 0.0471 [A/F]
    in [A/F]
Q10 = 2.35
Q = Q10^phys.Q

#
# Background calcium current
#
[icab]
ICaB = ICaB_jn + ICaB_sl
    in [A/F]
ICaB_jn = cell.fjn * gCaB * (membrane.V - rev.ECa_jn)
    in [A/F]
ICaB_sl = cell.fsl * gCaB * (membrane.V - rev.ECa_sl)
    in [A/F]
gCaB = 6.0643e-4 [mS/uF]
    in [mS/uF]

#
# SR calcium release
#
[ryr]
use calcium.Ca_jn, cabsr.Ca_sr
J_SRCarel = ks * o * (Ca_sr - Ca_jn)
    in [mM/ms]
ks = 25 [1/ms]
    in [1/ms]
kom = 0.06 [1/ms]
    in [1/ms]
kim = 0.005 [1/ms]
    in [1/ms]
kiCa = 0.5 [1/mM/ms]
    in [1/mM/ms]
koCa = 10 [1/mM^2/ms] * (1 + 2 * mode.AF)
    in [1/mM^2/ms]
ec50SR = 0.45 [mM]
    in [mM]
MinSR = 1
MaxSR = 15
kCaSR = MaxSR - (MaxSR - MinSR) / (1 + (ec50SR / Ca_sr)^2.5)
kiSRCa = kiCa * kCaSR
    in [1/mM/ms]
koSRCa = koCa / kCaSR
    in [1/mM^2/ms]
dot(r) = kim * ri - kiSRCa * Ca_jn * r - (koSRCa * Ca_jn^2 * r - kom * o)
dot(o) = koSRCa * Ca_jn^2 * r - kom * o - (kiSRCa * Ca_jn * o - kim * i)
dot(i) = kiSRCa * Ca_jn * o - kim * i - (kom * i - koSRCa * Ca_jn^2 * ri)
ri = 1 - r - o - i

#
# SR calcium pump
#
[serca]
use calcium.Ca_i, cabsr.Ca_sr
J_serca = Q * Vmax * ((Ca_i / Kmf)^h - (Ca_sr / Kmr)^h) / (1 + (Ca_i / Kmf)^h + (Ca_sr / Kmr)^h)    in [mM/ms]
Vmax = 5.3114e-3 [mM/ms]
    in [mM/ms]
Kmr = 1.7 [mM]
    in [mM]
Kmf = 0.246e-3 [mM] * 2.5
    in [mM]
h = 1.787
Q10 = 2.6
Q = Q10^phys.Q

#
# SR calcium leak
#
[caleak]
use cabsr.Ca_sr, calcium.Ca_jn
J_SRleak = 5.348e-6 [1/ms] * (Ca_sr - Ca_jn) * (1 + 0.25 * mode.AF)
    in [mM/ms]

#
# Cytosolic calcium buffering
#
[cabct]
use cell.Vmyo, cell.Vjn, cell.Vsl
use calcium.Ca_i, calcium.Ca_jn, calcium.Ca_sl
use cabss.J_CaB_jn, cabss.J_CaB_sl
use ion.Mg_i
J_CaB_cytosol = dot(TnCL) + dot(TnCHCa) + dot(TnCHMg) + dot(CaM) + dot(MyoCa) + dot(MyoMg) + dot(SRB)
    in [mM/ms]
# TnCl
Bmax_TnClow = 0.07 [mM]
    in [mM]
koff_tncl = 19.6e-3 [1/ms]
    in [1/ms]
kon_tncl = 32.7 [1/mM/ms]
    in [1/mM/ms]
Bmax_TnChigh = 140e-3 [mM]
    in [mM]
koff_tnchCa = 0.032e-3 [1/ms]
    in [1/ms]
kon_tnchCa = 2.37 [1/mM/ms]
    in [1/mM/ms]
koff_tnchMg = 3.33e-3 [1/ms]
    in [1/ms]
kon_tnchMg = 3e-3 [1/mM/ms]
    in [1/mM/ms]
dot(TnCL) = kon_tncl * Ca_i * (Bmax_TnClow - TnCL) - koff_tncl * TnCL
    in [mM]
dot(TnCHCa) = kon_tnchCa * Ca_i * (Bmax_TnChigh - TnCHCa - TnCHMg) - koff_tnchCa * TnCHCa
    in [mM]
dot(TnCHMg) = kon_tnchMg * Mg_i * (Bmax_TnChigh - TnCHCa - TnCHMg) - koff_tnchMg * TnCHMg
    in [mM]
# Calmodulin
Bmax_CaM = 24e-3 [mM]
    in [mM]
koff_cam = 238e-3 [1/ms]
    in [1/ms]
kon_cam = 34 [1/mM/ms]
    in [1/mM/ms]
dot(CaM) = kon_cam * Ca_i * (Bmax_CaM - CaM) - koff_cam * CaM
    in [mM]
# Myosin-Ca and Myosin-Mg
Bmax_myosin = 140e-3 [mM]
    in [mM]
koff_myoCa = 0.46e-3 [1/ms]
    in [1/ms]
kon_myoCa = 13.8 [1/mM/ms]
    in [1/mM/ms]
koff_myoMg = 0.057e-3 [1/ms]
    in [1/ms]
kon_myoMg = 0.0157 [1/mM/ms]
    in [1/mM/ms]
dot(MyoCa) = kon_myoCa * Ca_i * (Bmax_myosin - MyoCa - MyoMg) - koff_myoCa * MyoCa
    in [mM]
dot(MyoMg) = kon_myoMg * Mg_i * (Bmax_myosin - MyoCa - MyoMg) - koff_myoMg * MyoMg
    in [mM]
# SRB
Bmax_SR = 19 * 0.9e-3 [mM]
    in [mM]
koff_sr = 60e-3 [1/ms]
    in [1/ms]
kon_sr = 100 [1/mM/ms]
    in [1/mM/ms]
dot(SRB) = kon_sr * Ca_i * (Bmax_SR - SRB) - koff_sr * SRB
    in [mM]

#
# Junctional and SL calcium buffers
#
[cabss]
use calcium.Ca_sl, calcium.Ca_jn
use cell.Vmyo, cell.Vsl, cell.Vjn
J_CaB_jn = dot(SLL_jn) + dot(SLH_jn)
    in [mM/ms]
J_CaB_sl = dot(SLL_sl) + dot(SLH_sl)
    in [mM/ms]
BmaxSLL_jn = 4.6e-3 [mM] * Vmyo / Vjn * 0.1
    in [mM]
BmaxSLL_sl = 37.4e-3 [mM] * Vmyo / Vsl
    in [mM]
BmaxSLH_jn = 1.65e-3 [mM] * Vmyo / Vjn * 0.1
    in [mM]
BmaxSLH_sl = 13.4e-3 [mM] * Vmyo / Vsl
    in [mM]
koffSLL = 1.3 [1/ms]
    in [1/ms]
konSLL = 100 [1/mM/ms]
    in [1/mM/ms]
koffSLH = 0.03 [1/ms]
    in [1/ms]
konSLH = 100 [1/mM/ms]
    in [1/mM/ms]
dot(SLL_jn) = konSLL * Ca_jn * (BmaxSLL_jn - SLL_jn) - koffSLL * SLL_jn
    in [mM]
dot(SLL_sl) = konSLL * Ca_sl * (BmaxSLL_sl - SLL_sl) - koffSLL * SLL_sl
    in [mM]
dot(SLH_jn) = konSLH * Ca_jn * (BmaxSLH_jn - SLH_jn) - koffSLH * SLH_jn
    in [mM]
dot(SLH_sl) = konSLH * Ca_sl * (BmaxSLH_sl - SLH_sl) - koffSLH * SLH_sl
    in [mM]

#
# SR calcium buffer
#
[cabsr]
use cell.Vmyo, cell.Vsr
Bmax_Csqn = 0.14 [mM] * Vmyo / Vsr
    in [mM]
koff_csqn = 65 [1/ms]
    in [1/ms]
kon_csqn = 100 [1/mM/ms]
    in [1/mM/ms]
dot(Csqn) = kon_csqn * Ca_sr * (Bmax_Csqn - Csqn) - koff_csqn * Csqn
    in [mM]
dot(Ca_sr) = serca.J_serca - (caleak.J_SRleak * Vmyo / Vsr + ryr.J_SRCarel) - dot(Csqn)
    in [mM]

#
# Calcium concentrations
#
[calcium]
use cell.C, phys.F
use cell.Vjn, cell.Vsr, cell.Vsl, cell.Vmyo
use serca.J_serca, ryr.J_SRCarel, caleak.J_SRleak
use cabct.J_CaB_cytosol, cabss.J_CaB_jn, cabss.J_CaB_sl
ICa_tot = ICa_tot_jn + ICa_tot_sl
    in [A/F]
ICa_tot_jn = ical.ICaL_Ca_jn + icab.ICaB_jn + ipca.IpCa_jn - 2 * inaca.INaCa_jn
    in [A/F]
ICa_tot_sl = ical.ICaL_Ca_sl + icab.ICaB_sl + ipca.IpCa_sl - 2 * inaca.INaCa_sl
    in [A/F]
J_Ca_jnsl = 1 [L] / 1.2134e12 [ms]
    in [L/ms]
J_Ca_slmyo = 1 [L] / 2.68510e11 [ms]
    in [L/ms]
dot(Ca_i) = -J_serca * Vsr / Vmyo - J_CaB_cytosol + J_Ca_slmyo / Vmyo * (Ca_sl - Ca_i)
    in [mM]
    label Ca_i
dot(Ca_jn) = -ICa_tot_jn * C / (Vjn * 2 * F) + J_Ca_jnsl / Vjn * (Ca_sl - Ca_jn) - J_CaB_jn + J_SRCarel * Vsr / Vjn + J_SRleak * Vmyo / Vjn
    in [mM]
dot(Ca_sl) = -ICa_tot_sl * C / (Vsl * 2 * F) + J_Ca_jnsl / Vsl * (Ca_jn - Ca_sl) + J_Ca_slmyo / Vsl * (Ca_i - Ca_sl) - J_CaB_sl
    in [mM]

#
# Sodium buffering
#
[nabss]
Bmax_jn = 7.561 [mM]
    in [mM]
Bmax_sl = 1.65 [mM]
    in [mM]
koff = 1e-3 [1/ms]
    in [1/ms]
kon = 1e-4 [1/mM/ms]
    in [1/mM/ms]
dot(NaB_jn) = kon * sodium.Na_jn * (Bmax_jn - NaB_jn) - koff * NaB_jn
    in [mM]
dot(NaB_sl) = kon * sodium.Na_sl * (Bmax_sl - NaB_sl) - koff * NaB_sl
    in [mM]

#
# Sodium concentrations
#
[sodium]
use cell.C, phys.F
use cell.Vjn, cell.Vsl, cell.Vmyo
INa_tot = INa_tot_jn + INa_tot_sl
    in [A/F]
INa_tot_jn = ina.INa_jn + inab.INaB_jn + 3 * inaca.INaCa_jn + 3 * inak.INaK_jn + ical.ICaL_Na_jn + inal.INaL_jn
    in [A/F]
INa_tot_sl = ina.INa_sl + inab.INaB_sl + 3 * inaca.INaCa_sl + 3 * inak.INaK_sl + ical.ICaL_Na_sl + inal.INaL_sl
    in [A/F]
J_Na_jnsl = 1 [L] / (1.6382e12 [ms] / 3 * 100)
    in [L/ms]
J_Na_slmyo = 1 [L] / (1.8308e10 [ms] / 3 * 100)
    in [L/ms]
dot(Na_jn) = -INa_tot_jn * C / (Vjn * F) + J_Na_jnsl / Vjn * (Na_sl - Na_jn) - dot(nabss.NaB_jn)
    in [mM]
dot(Na_sl) = -INa_tot_sl * C / (Vsl * F) + J_Na_jnsl / Vsl * (Na_jn - Na_sl) + J_Na_slmyo / Vsl * (Na_i - Na_sl) - dot(nabss.NaB_sl)
    in [mM]
dot(Na_i) = J_Na_slmyo / Vmyo * (Na_sl - Na_i)
    in [mM]
    label Na_i

#
# Potassium currents
#
[potassium]
IK_tot = ito.Ito + ikr.IKr + iks.IKs + ik1.IK1 - 2 * inak.INaK + ical.ICaL_K + ikp.IKp + ikur.IKur + ikach.IKACh
    in [A/F]

#
# Chloride currents
#
[chloride]
ICl_tot = iclca.IClCa + iclb.IClB
    in [A/F]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1        50       0.5      1000     0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Display the results
plt.figure()
plt.xlabel('Time (ms)')
plt.ylabel('Membrane potential (mV)')
plt.plot(d.time(), d['membrane.V'])
plt.show()

