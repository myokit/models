[[model]]
name: sampson-2010
version: 20240904
mmt_authors: Michael Clerx
display_name: Sampson-Iyer et al., 2010
desc: """
    The 2010 model of the human Purkinje cell AP by Sampson et al. [1].

    This implementation is based on the original fortran code published by the
    authors as supplement to [1]. It was checked against the original code by
    comparing the calculated derivatives (which matched to within machine
    precision).

    The stimulus was set to 0.5ms and approximately half the depolarisation
    threshold.

    [1] Sampson*, K. J., Iyer*, V., Marks, A. R., & Kass, R. S. (2010). A
        computational model of Purkinje fibre single cell electrophysiology:
        implications for the long QT syndrome. Journal of Physiology, 588(14),
        2643-2655. (Sampson & Iyer contributed equally)
        https://doi.org/10.1113/jphysiol.2010.187328

"""
# Initial values
membrane.V     = -8.03864711399999976e+01
sodium.Nai     =  1.20687050500000002e+01
potassium.Ki   =  1.22483450199999993e+02
calcium.Cai    =  7.56225546699999958e-05
calcium.CaNSR  =  2.59898837400000027e-01
calcium.CaSS   =  1.24655751999999995e-04
calcium.CaJSR  =  2.59679515799999983e-01
ryr.C1         =  4.65590390899999984e-01
ryr.O1         =  6.34345983199999957e-04
ryr.C2         =  5.33775261499999987e-01
ryr.O2         =  2.58066283699999986e-09
ical.C0        =  8.74379838900000039e-01
ical.C1        =  2.55268330899999993e-02
ical.C2        =  2.79463949400000000e-04
ical.C3        =  1.35979496400000004e-06
ical.C4        =  2.48115507400000008e-09
ical.Open      =  1.85837559400000008e-10
ical.CCa0      =  8.89536543300000065e-02
ical.CCa1      =  1.03878563100000005e-02
ical.CCa2      =  4.54899679899999998e-04
ical.CCa3      =  8.85360913299999938e-06
ical.CCa4      =  6.46181672899999939e-08
ical.yCa       =  9.98998351100000015e-01
caflux.HTRPNCa =  9.74145534599999974e-01
caflux.LTRPNCa =  7.05428108299999967e-02
ito.C0         =  9.12446021800000007e-01
ito.C1         =  5.57395224500000022e-02
ito.C2         =  1.27681665400000005e-03
ito.C3         =  1.29938504799999993e-05
ito.O          =  4.95957872400000005e-08
ito.CI0        =  1.41240034599999995e-02
ito.CI1        =  1.10576340999999998e-02
ito.CI2        =  4.37517185700000023e-03
ito.CI3        =  9.10523457199999969e-04
ito.OI         =  5.71714766299999999e-05
ikr.C1         =  7.89638103000000036e-01
ikr.C2         =  7.51317227500000002e-04
ikr.C3         =  1.31802129699999990e-04
ikr.O          =  2.70143786700000017e-05
ikr.I          =  7.34187676599999975e-06
iks.xs_wt      =  1.95694799400000008e-01
iks.xf_wt      =  7.40047161399999998e-04
nav15.C3       =  6.13484026399999993e-01
nav15.C2       =  1.93896494799999999e-02
nav15.C1       =  2.47138734400000005e-04
nav15.O        =  5.92094839499999983e-07
nav15.IC3      =  2.88855704800000002e-01
nav15.IC2      =  9.13117952200000020e-03
nav15.IF       =  1.17674846899999997e-04
nav15.IS1      =  1.38841821899999998e-03
nav15.IS2      =  6.62152358299999966e-02
nav15.BC3      =  5.17784203000000017e-05
nav15.BC2      =  1.63649800299999998e-06
nav15.BC1      =  2.08587473400000016e-08
nav15.BO       =  5.01137449999999989e-11
ihcn.hcn1      =  3.45377576399999997e-01
ihcn.hcn2      =  4.08547201099999979e-01
ihcn.hcn3      =  1.80893426200000013e-01
ihcn.hcn4      =  3.54868422399999967e-02
ihcn.hcn5      =  2.59639364999999980e-03
ihcn.hcn6      =  1.13417300900000000e-03
ihcn.hcn7      =  5.28665430399999966e-03
ihcn.hcn8      =  9.66413904500000066e-03
ihcn.hcn9      =  8.13729668700000075e-03
ihcn.hcn10     =  2.64074099199999987e-03
nav11.C3       =  4.00644227700000022e-01
nav11.C2       =  2.21514457499999992e-03
nav11.C1       =  4.69401528400000025e-06
nav11.O        =  9.08194443799999939e-09
nav11.IC3      =  5.99583493199999998e-02
nav11.IC2      =  3.35246803199999981e-04
nav11.IF       =  3.65674332999999992e-06
nav11.IS1      =  8.87492239200000053e-03
nav11.IS2      =  5.26928426500000047e-01
nav11.BC3      =  3.12749104299999976e-05
nav11.BC2      =  1.72916501500000004e-07
nav11.BC1      =  3.66022597099999997e-10
nav11.BO       =  6.60499340399999993e-13
icat.n         =  2.08213191599999990e-03
icat.l         =  5.48343768800000020e-01

#
# Physical constants
# Appendix page 1, table 1
#
[phys]
F = 96.5 [C/mmol] : Faraday constant
    in [C/mmol]
T = 310 [K] : Absolute temperature
    in [K]
R = 8.315 [J/mol/K] : Ideal gas constant
    in [J/mol/K]
RTF = R * T / F
    in [mV]
VFRT = membrane.V / RTF
VFFRT = F * VFRT
    in [C/mmol]

#
# Simulation engine variables
#
[engine]
time = 0 [ms]
    in [ms]
    bind time
pace = 0
    bind pace

#
# Membrane potential
# Appendix page 24
#
[membrane]
use stimulus.i_stim
dot(V) = -(i_ion + i_diff + i_stim)
    in [mV]
    desc: Membane potential
    label membrane_potential
i_ion = a1 + a2 + a3
    in [A/F]
    label cellular_current
    a1 = nav15.INa + nav11.INa1 + ical.ICa + icat.I + ical.ICaK + ikr.IKr + iks.IKs + ihcn.IHCN
        in [A/F]
    a2 = ik1.IK1 + inaca.INaCa + inak.INaK + ito.Ito1 + isus.Isus
        in [A/F]
    a3 = ipca.IpCa
        in [A/F]
i_diff = 0 [A/F]
    in [A/F]
    bind diffusion_current

#
# Stimulus current
#
[stimulus]
i_stim = engine.pace * amplitude
    in [A/F]
amplitude = -30 [A/F] * 2
    in [A/F]

#
# Nav1.5 current
# Appendix page 5
#
[nav15]
desc: """
Encodes a Markov model for the Nav1.5 current through SCN5A.

The paper [1] refers to [2] but the code given in the appendix (page 5) has
different values for mu1, mu2 and GNa. In the code, an extra state "BIF" is
given, which corresponds to the model used in [4], but the transition rates to
and from this extra state are set to zero.

As a result, the model given below is similar in form (but not in parameters)
to the mutation variant described in [2], but with the parameters from the WT
model and a lower transition rate from and to the "burst" states (mu1, mu2) and
a higher open conductivity GNa.

The intermediate paper [3] also uses the mutant model form (with changed
parameters) for the WT formulation. In [3] the value mu2 is equal to that used
in [1].

Used parameter values:

[1] Sampson & Kass (Appendix and code)
mu1 = 4.3e-8 [1/ms]  # Transition rate to burst states
mu2 = 3e-4 [1/ms]    # Transition rate out of burst states
GNa = 35 [mS/uF]     # Open channel conductivity

[2] Clancy & Rudy 2002 (Data supplement)
mu1_wt = 0           # WT doesn't have this state
mu2_wt = 0           # WT doesn't have this state
mu1_1795insD = 1e-7
mu2_1795insD = 9.5e-4
GNa = 23.5

[3] Clancy & Kass 2003 (Data supplement)
mu1_wt = 1e-7
mu2_wt = 3e-4
GNa = 10.5

[4] Clancy & Kass 2004
No data supplement :(

The paper doesn't mention any of this so it's unclear why the WT version of [2]
was not used.

[1] Sampson, Iyer, Marks, Kass (2010) A computational model of Purkinje fibre
    single cell electrophysiology: implications for the long QT syndrome
    Journal of Physiology
    http://dx.doi.org/10.1113/jphysiol.2010.187328
[2] Clancy, Rudy (2002) A single mutation underlies Brugada and LQT1
    Circulation
    * Equations given in data supplement
[3] Clancy, Tateyama, Liu, Wehrens, Kass (2003) Non-Equilibrium Gating in
    Cardiac Na+ Channels: An Original Mechanism of Arrhythmia
    Circulation
    * Equations given in data supplement
[4] Clancy, Kass (2004) Theoretical Investigation of the Neuronal Na1 Channel
    SCN1A: Abnormal Gating and Epilepsy
    Biophysical Journal
    * No data supplement, but the paper itself does contain a very clear
      explanation of the markov model (but no equations).
"""
use membrane.V
a11 = 3.802 [1/ms] / (0.1027 * exp(-V / 17 [mV]) + 0.20 * exp(-V / 150 [mV]))
    in [1/ms]
a12 = 3.802 [1/ms] / (0.1027 * exp(-V / 15 [mV]) + 0.23 * exp(-V / 150 [mV]))
    in [1/ms]
a13 = 3.802 [1/ms] / (0.1027 * exp(-V / 12 [mV]) + 0.25 * exp(-V / 150 [mV]))
    in [1/ms]
b11 = 0.1917 [1/ms] * exp(-V / 20.3 [mV])
    in [1/ms]
b12 = 0.2 [1/ms] * exp(-(V - 5 [mV]) / 20.3 [mV])
    in [1/ms]
b13 = 0.22 [1/ms] * exp(-(V - 10 [mV]) / 20.3 [mV])
    in [1/ms]
a2 = 9.178 [1/ms] * exp(V / 29.68 [mV])
    in [1/ms]
b2 = (a3 * a2 * a13) / (b3 * b13)
    in [1/ms]
a3 = 3.7933e-7 [1/ms] * exp(-V / 7.7 [mV])
    in [1/ms]
b3 = 0.0084 [1/ms] + 0.00002 [1/ms/mV] * V
    in [1/ms]
a4 = a2 / 100
    in [1/ms]
b4 = a3
    in [1/ms]
a5 = a2 / 9.5e4
    in [1/ms]
b5 = a3 / 50
    in [1/ms]
# CX to BCX transitions, BCX to CX transitions
mu1 = 4.3e-8 [1/ms]
    in [1/ms]
mu2 = 3.0e-4 [1/ms]
    in [1/ms]
dot(C3) = IC3 * a3  + BC3 * mu2 + C2 * b11 - C3  * (a11 + b3  + mu1)
dot(C2) = IC2 * a3  + BC2 * mu2 + C1 * b12 + C3 * a11 - C2 * (a12 + b3  + mu1 + b11)
dot(C1) = IF  * a3  + BC1 * mu2 + O  * b13 + C2 * a12 - C1 * (a13 + b3  + mu1 + b12)
dot(O) = IF  * b2  + BO  * mu2 + C1 * a13  -O   * (a2  + b13 + mu1)
dot(IC3) = IC2 * b11 + C3  * b3 - IC3 * (a11 + a3)
dot(IC2) = IF  * b12 + C2  * b3 + IC3 * a11 - IC2 * (a12 + a3  + b11)
dot(IF) = IS1 * b4  + O   * a2 + IC2 * a12 + C1 * b3 - IF  * (a4  + b2  + b12 + a3)
dot(IS1) = IS2 * b5  + IF  * a4 - IS1 * (a5  + b4)
dot(IS2) = IS1 * a5 - IS2 * b5
dot(BC3) = BC2 * b11 + C3  * mu1 - BC3 * (a11 + mu2)
dot(BC2) = BC1 * b12 + BC3 * a11 + C2 * mu1 - BC2 * (a12 + b11 + mu2)
dot(BC1) = BO  * b13 + BC2 * a12 + C1 * mu1 - BC1 * (a13 + b12 + mu2)
dot(BO) = BC1 * a13 + O   * mu1 - BO  * (b13 + mu2)
GNa = 35 [mS/uF] : peak INa conductance
    in [mS/uF]
INa = GNa * (O + BO) * (V - nernst.ENa)
    desc: Na+ current
    in [A/F]

#
# TTX sensitive Na current (Nav1.1)
# Appendix page 8
#
[nav11]
desc: """
Encodes a Markov model for the Nav1.1 current through SCN1A.
"""
use membrane.V
a11 = 2.802 [1/ms] / (0.21 * exp(-V / 17 [mV]) + 0.23 * exp(-V / 150 [mV]))
    in [1/ms]
a12 = 2.802 [1/ms] / (0.23 * exp(-V / 15 [mV]) + 0.25 * exp(-V / 150 [mV]))
    in [1/ms]
a13 = 2.802 [1/ms] / (0.25 * exp(-V / 12 [mV]) + 0.27 * exp(-V / 150 [mV]))
    in [1/ms]
b11 = 0.4 [1/ms] * exp(-V / 20.3 [mV])
    in [1/ms]
b12 = 0.4 [1/ms] * exp(-(V - 5 [mV]) / 20.3 [mV])
    in [1/ms]
b13 = 0.4 [1/ms] * exp(-(V - 10 [mV]) / 20.3 [mV]) / 4.5
    in [1/ms]
a3 = 3.7933e-7 [1/ms] * exp(-V / 7.6 [mV]) * 3
    in [1/ms]
b3 = 0.0084 [1/ms] + 0.00002 [1/ms/mV] * V
    in [1/ms]
a2 = 9.178 [1/ms] * exp(V / 29.68 [mV]) / 4.5
    in [1/ms]
a4 = a2 / 100 * 1.5 * 0.285
    in [1/ms]
b4 = a3 / 5
    in [1/ms]
a5 = a2 / 95000 * 80
    in [1/ms]
b5 = a3 / 30 / 10
    in [1/ms]
b2 = (a3 * a2 * a13) / (b3 * b13)
    in [1/ms]
# CX to BCX transitions, BCX to CX transitions
mu1 = 4.3e-8 [1/ms]
    in [1/ms]
mu2 = 3.0e-4 [1/ms]
    in [1/ms]
dot(C3) = (IC3 * a3 + BC3 * mu2 + C2 * b11) - C3 * (a11 + b3 + mu1)
dot(C2) = (IC2 * a3 + BC2 * mu2+C1 * b12+C3 * a11) - C2 * (a12 + b3 + mu1 + b11)
dot(C1) = (IF * a3 + BC1 * mu2+O*b13+C2 * a12) - C1 * (a13+b3+mu1+b12)
dot(O) = (IF * b2 + BO*mu2+C1 * a13) - O * (a2 + b13 + mu1)
dot(IC3) = (IC2 * b11 + C3 * b3)- IC3 * (a11 + a3)
dot(IC2) = (IF * b12 + C2 * b3 + IC3 * a11) - IC2 * (a12 + a3 + b11)
dot(IF) = (IS1 * b4 + O * a2 + IC2 * a12 + C1 * b3) - IF * (a4 + b2 + b12 + a3)
dot(IS1) = (IS2 * b5 + IF * a4) - IS1 * (a5 + b4)
dot(IS2) = (IS1 * a5)-(IS2 * b5)
dot(BC3) = (BC2 * b11 + C3 * mu1) - BC3 * (a11 + mu2)
dot(BC2) = (BC1 * b12 + BC3 * a11 + C2 * mu1) - BC2 * (a12 + b11 + mu2)
dot(BC1) = (BO * b13 + BC2 * a12 + C1 * mu1) - BC1 * (a13 + b12 + mu2)
dot(BO) = (BC1 * a13 + O * mu1) - BO * (b13 + mu2)
GNa1 = 9 [mS/uF]: peak Nav1.1 conductance
    in [mS/uF]
INa1 = GNa1 * (O + BO) * (V - nernst.ENa)
    desc: Nav1.1 current
    in [A/F]

#
# IHCN sustained component of transient outward current / Funny current
# Appendix page 14
#
[ihcn]
use membrane.V, phys.VFRT
use nernst.ENa, nernst.EK
h_f = 2.2361
h_gamma = 0.04025 [1/ms] * exp(-1.242 * phys.VFRT) / 1000
    in [1/ms]
h_alpha = 0.0001712 [1/ms] * exp(-1.465 * phys.VFRT) / 1000
    in [1/ms]
h_beta = 26.17 [1/ms] * exp(1.465 * phys.VFRT) / 1000
    in [1/ms]
h_delta = 287.5 [1/ms] * exp(1.242 * phys.VFRT) / 1000
    in [1/ms]
dot(hcn1) = -(4*h_gamma+h_alpha) * hcn1 + h_delta*hcn2 + h_beta*hcn6
dot(hcn2) = -(h_delta + 3 * h_gamma + h_alpha * h_f) * hcn2 + 4*h_gamma*hcn1 + 2 * h_delta*hcn3 + h_beta/h_f*hcn7
dot(hcn3) = -(2 * h_delta+2 * h_gamma+h_alpha*h_f^2) * hcn3 + 3*h_gamma*hcn2 + 3*h_delta*hcn4 + h_beta/h_f^2 * hcn8
dot(hcn4) = -(3*h_delta+h_gamma+h_alpha*h_f^3) * hcn4  + 2 * h_gamma*hcn3 + 4*h_delta*hcn5 + h_beta/h_f^3*hcn9
dot(hcn5) = -(4*h_delta+h_alpha*h_f^4) * hcn5 + h_gamma*hcn4 + h_beta/h_f^4*hcn10
dot(hcn6) = -(h_beta+4*h_gamma*h_f) * hcn6 + h_alpha*hcn1  + h_delta/h_f*hcn7
dot(hcn7) = -(h_beta/h_f+h_delta/h_f+3*h_gamma*h_f) * hcn7 + h_alpha*h_f*hcn2 + 4*h_gamma*h_f*hcn6 + 2 * h_delta/h_f*hcn8
dot(hcn8) = -(h_beta/h_f^2+2 * h_delta/h_f+2 * h_gamma*h_f) * hcn8 + h_alpha*h_f^2 * hcn3 + 3*h_gamma*h_f*hcn7 + 3*h_delta/h_f*hcn9
dot(hcn9) = -(h_beta/h_f^3+3*h_delta/h_f+h_gamma*h_f) * hcn9 + h_alpha*h_f^3*hcn4 + 2 * h_gamma*h_f*hcn8 + 4*h_delta/h_f*hcn10
dot(hcn10) = -(h_beta/h_f^4+ 4*h_delta/h_f) * hcn10 + h_alpha*h_f^4*hcn5 + h_gamma*h_f*hcn9
IHCNmax = 0.3225 [mS/uF]
    in [mS/uF]
IHCN = IHCNmax * (hcn6 + hcn7 + hcn8 + hcn9 + hcn10) * (V - (ENa / 3 + (2 * EK / 3)))
    in [A/F]

#
# IKr current
# Appendix page 10
#
[ikr]
use membrane.V
T_Const = 5.320000001 # T constant from 23 to 37C
A0 = 0.017147641733086 [1/ms]
    in [1/ms]
B0 = 0.03304608038835 [1/mV]
    in [1/mV]
A1 = 0.03969328381141 [1/ms]
    in [1/ms]
B1 = -0.04306054163980 [1/mV]
    in [1/mV]
A2 = 0.02057448605977 [1/ms]
    in [1/ms]
B2 = 0.02617412715118 [1/mV]
    in [1/mV]
A3 = 0.00134366604423 [1/ms]
    in [1/ms]
B3 = -0.02691385498399 [1/mV]
    in [1/mV]
A4 = 0.10666316491288 [1/ms]
    in [1/ms]
B4 = 0.00568908859717 [1/mV]
    in [1/mV]
A5 = 0.00646393910049 [1/ms]
    in [1/ms]
B5 = -0.04536642959543 [1/mV]
    in [1/mV]
A6 = 0.00008039374403 [1/ms]
    in [1/ms]
B6 = 0.00000069808924 [1/mV]
    in [1/mV]
C2H_to_C3H = T_Const * 0.02608362043337 [1/ms]
    in [1/ms]
C3H_to_C2H = T_Const * 0.14832978132145 [1/ms]
    in [1/ms]
C1H_to_C2H = T_Const * A0 * exp(B0 * V)
    in [1/ms]
C2H_to_C1H = T_Const * A1 * exp(B1 * V)
    in [1/ms]
C3H_to_OH =  T_Const * A2 * exp(B2 * V)
    in [1/ms]
OH_to_C3H =  T_Const * A3 * exp(B3 * V)
    in [1/ms]
OH_to_IH =   T_Const * A4 * exp(B4 * V)
    in [1/ms]
IH_to_OH =   T_Const * A5 * exp(B5 * V)
    in [1/ms]
C3H_to_IH =  T_Const * A6 * exp(B6 * V)
    in [1/ms]
IH_to_C3H =  (OH_to_C3H*IH_to_OH*C3H_to_IH)/(C3H_to_OH*OH_to_IH)
    in [1/ms]
dot(C1) = C2H_to_C1H * C2 - C1H_to_C2H * C1
    desc: HERG channel state C1 (closed)
dot(C2) = a1 - a2
    a1 = C1H_to_C2H * C1 + C3H_to_C2H * C3
        in [1/ms]
    a2 = (C2H_to_C1H + C2H_to_C3H) * C2
        in [1/ms]
    desc: HERG channel state C2
dot(C3) = a1 - a2
    a1 = C2H_to_C3H*C2 + OH_to_C3H*O + IH_to_C3H*I
        in [1/ms]
    a2 = (C3H_to_IH + C3H_to_OH + C3H_to_C2H) * C3
        in [1/ms]
    desc: HERG channel state C3
dot(O) = a1 - a2
    a1 = C3H_to_OH * C3 + IH_to_OH * I
        in [1/ms]
    a2 = (OH_to_C3H + OH_to_IH) * O
        in [1/ms]
    desc: HERG channel state O (Open)
dot(I) = a1 - a2
    a1 =  C3H_to_IH * C3 + OH_to_IH * O
        in [1/ms]
    a2 = (IH_to_C3H + IH_to_OH) * I
        in [1/ms]
    desc: HERG channel state I1(Inactivated)
GKr = 0.0383724 [mS/uF] : peak IKr conductance
    in [mS/uF]
    label g_Kr
fKo = sqrt(extra.Ko / 4 [mM])
IKr = GKr * fKo * O * (V - nernst.EK)
    desc: rapid activating delayed rectifier K+ current
    in [A/F]

#
# IKs
# Appendix page 11
#
[iks]
use membrane.V
dot(xs_wt) = alpha * (1 - xs_wt) - beta * xs_wt
    alpha = if(V == -11 [mV],
               33e-6 [1/ms/mV] / 0.13 [1/mV],
               33e-6 [1/ms/mV] * (V + 11 [mV]) / (1 - exp(-0.13 [1/mV] * (V + 11 [mV]))))
        in [1/ms]
    beta = 1e-4 [1/ms] * (exp(-0.015 [1/mV] * V))
        in [1/ms]
    desc: IKs chanel state C0 (closed)
dot(xf_wt) = alpha * (1 - xf_wt) - beta * xf_wt
    alpha = if(V == 21 [mV],
               1.46e-4 [1/ms/mV] / 0.078 [1/mV],
               1.46e-4 [1/ms/mV] * (V - 21 [mV]) / (1 - exp(-0.078 [1/mV] * (V - 21 [mV]))))
        in [1/ms]
    beta = 9.1e-4 [1/ms] * (exp(-0.028 [1/mV] * V))
        in [1/ms]
    desc: IKs chanel state C1 (closed)
GKs = 0.02808190224571 [mS/uF] : peak IKs  conductance
    in [mS/uF]
IKs = GKs * xs_wt * xf_wt * (V - nernst.EK)
    desc: Slow activating delayed rectifier K+ current
    in [A/F]

#
# L-type calcium current (ICaL)
# Appendix page 21
#
[ical]
use membrane.V
use extra.Cao, extra.Ko
bL = 2 : mode transition parameter
aL = 2 : mode transition parameter
alpha = 4 * 1.2  * 0.416 [1/ms] * exp( 0.012 [1/mV] * (V - 35 [mV]))
    in [1/ms]
beta = 4 * 0.45 * 0.049 [1/ms] * exp(-0.065 [1/mV] * (V - 22 [mV]))
    in [1/ms]
alpha_prime = aL * alpha
    in [1/ms]
beta_prime = beta / bL
    in [1/ms]
gamma = 0.6 * 0.09233 [1/ms/mM] * calcium.CaSS
    in [1/ms]
C0_to_C1 = 4 * alpha
    in [1/ms]
C1_to_C2 = 3 * alpha
    in [1/ms]
C2_to_C3 = 2 * alpha
    in [1/ms]
C3_to_C4 =   alpha
    in [1/ms]
CCa0_to_CCa1 = 4 * alpha_prime
    in [1/ms]
CCa1_to_CCa2 = 3 * alpha_prime
    in [1/ms]
CCa2_to_CCa3 = 2 * alpha_prime
    in [1/ms]
CCa3_to_CCa4 = alpha_prime
    in [1/ms]
C1_to_C0 = beta
    in [1/ms]
C2_to_C1 = 2 * beta
    in [1/ms]
C3_to_C2 = 3 * beta
    in [1/ms]
C4_to_C3 = 4 * beta
    in [1/ms]
CCa1_to_CCa0 = beta_prime
    in [1/ms]
CCa2_to_CCa1 = 2 * beta_prime
    in [1/ms]
CCa3_to_CCa2 = 3 * beta_prime
    in [1/ms]
CCa4_to_CCa3 = 4 * beta_prime
    in [1/ms]
C0_to_CCa0 = gamma
    in [1/ms]
C1_to_CCa1 = aL*C0_to_CCa0 # gamma*aL
    in [1/ms]
C2_to_CCa2 = aL*C1_to_CCa1 # gamma*aL^2
    in [1/ms]
C3_to_CCa3 = aL*C2_to_CCa2 # gamma*aL^3
    in [1/ms]
C4_to_CCa4 = aL*C3_to_CCa3 # gamma*aL^4
    in [1/ms]
CCa0_to_C0 = omega
    omega = .0025 [1/ms] : mode transition parameter
        in [1/ms]
    in [1/ms]
CCa1_to_C1 = CCa0_to_C0/bL # omega/bL
    in [1/ms]
CCa2_to_C2 = CCa1_to_C1/bL # omega/bL^2
    in [1/ms]
CCa3_to_C3 = CCa2_to_C2/bL # omega/bL^3
    in [1/ms]
CCa4_to_C4 = CCa3_to_C3/bL # omega/bL^4
    in [1/ms]
fL = 0.3 [1/ms] : transition rate into open state
    in [1/ms]
gL = 4 [1/ms]: transition rate out of open state
    in [1/ms]
dot(C0) = a2 - a1
    a1 = (C0_to_C1 + C0_to_CCa0) * C0
        in [1/ms]
    a2 = C1_to_C0 * C1 + CCa0_to_C0 * CCa0
        in [1/ms]
    desc: L-type Ca++ channel state C0
dot(C1) = a2 - a1
    a1 = (C1_to_C0 + C1_to_C2 + C1_to_CCa1) * C1
        in [1/ms]
    a2 = C0_to_C1 * C0 + C2_to_C1 * C2 + CCa1_to_C1 * CCa1
        in [1/ms]
    desc: L-type Ca++ channel state C1
dot(C2) = a2 - a1
    a1 = (C2_to_C1 + C2_to_C3 + C2_to_CCa2) * C2
        in [1/ms]
    a2 = C1_to_C2 * C1 + C3_to_C2 * C3 + CCa2_to_C2 * CCa2
        in [1/ms]
    desc: L-type Ca++ channel state C2
dot(C3) = a2 - a1
    a1 = (C3_to_C2+C3_to_C4+C3_to_CCa3) * C3
        in [1/ms]
    a2 = C2_to_C3*C2 + C4_to_C3*C4 + CCa3_to_C3*CCa3
        in [1/ms]
    desc: L-type Ca++ channel state C3
dot(C4) = a2 - a1
    a1 = (C4_to_C3+fL+C4_to_CCa4) * C4
        in [1/ms]
    a2 = C3_to_C4*C3 + gL*Open + CCa4_to_C4*CCa4
        in [1/ms]
    desc: L-type Ca++ channel state C4
dot(Open) =  fL*C4 - gL*Open
    desc: L-type Ca++ channel state Open
dot(CCa0) = a2 - a1
    a1 = (CCa0_to_CCa1+CCa0_to_C0) * CCa0
        in [1/ms]
    a2 = CCa1_to_CCa0 * CCa1 + C0_to_CCa0 * C0
        in [1/ms]
    desc: L-type Ca++ channel state CCa0
dot(CCa1) = a2 - a1
    a1 = (CCa1_to_CCa0+CCa1_to_CCa2+CCa1_to_C1) * CCa1
        in [1/ms]
    a2 = CCa0_to_CCa1 * CCa0 + CCa2_to_CCa1 * CCa2 + C1_to_CCa1 * C1
        in [1/ms]
    desc: L-type Ca++ channel state CCa1
dot(CCa2) = a2 - a1
    a1 = (CCa2_to_CCa1+CCa2_to_CCa3+CCa2_to_C2) * CCa2
        in [1/ms]
    a2 = CCa1_to_CCa2 * CCa1 + CCa3_to_CCa2 * CCa3 + C2_to_CCa2 * C2
        in [1/ms]
    desc: L-type Ca++ channel state CCa2
dot(CCa3) = a2 - a1
    a1 = (CCa3_to_CCa2+CCa3_to_CCa4+CCa3_to_C3) * CCa3
        in [1/ms]
    a2 = CCa2_to_CCa3*CCa2 + CCa4_to_CCa3*CCa4 + C3_to_CCa3*C3
        in [1/ms]
    desc: L-type Ca++ channel state CCa3
dot(CCa4) = a2 - a1
    a1 = (CCa4_to_CCa3+CCa4_to_C4) * CCa4
        in [1/ms]
    a2 = CCa3_to_CCa4*CCa3 + C4_to_CCa4*C4
        in [1/ms]
    desc: L-type Ca++ channel state CCa4
dot(yCa) = (yCa_inf-yCa) / tau_yCa
    tau_yCa = 1 / (0.00336336209452 [1/ms] / (0.5 + exp(V / -5.53899874036055 [mV])) +
                   0.00779046570737 [1/ms] * exp(V / -49.51039631160386 [mV]))
        in [ms]
    yCa_inf = a1 / (1 + exp((V + 28.5 [mV]) / 7.8 [mV])) + (1 - a1)
        a1 = 0.82
    desc: L-type Ca++ channel inactivation
Pscale = 1.8 : scaling factor for both PK and PCa
PCa = Pscale * 2.469e-1 [L/F/s] : L-type Ca++ channel permeability to Ca++
    in [L/F/s]
ICamax = PCa * 4 * phys.VFFRT * (a1 / a2)
    a1 =  1e-3 [mM] * exp(2 * phys.VFRT) - Cao * 0.341
        in [mM]
    a2 =  exp(2 * phys.VFRT) - 1
    in [A/F]
ICa = ICamax * yCa * Open
    desc: L-type channel Ca++ current
    in [A/F]

# Potassium component
PK = ical.Pscale * 4.574e-4 [L/F/s] : L-type Ca++ channel permeability to K+
    in [L/F/s]
ICahalf = -0.265 [A/F] : ICa level that reduces PK by half
    in [A/F]
PKprime = PK / (1 + (imax / ICahalf))
    imax = if(ICamax > 0 [A/F], 0 [A/F], ICamax)
        in [A/F]
    in [L/F/s]
ICaK = PKprime * Open * yCa * phys.VFFRT * (a1 / a2)
    a1 = potassium.Ki * exp(phys.VFRT) - Ko
        in [mM]
    a2 = exp(phys.VFRT) - 1
    desc: L-type channel K+ current
    in [A/F]

#
# T-type calcium current (ICaT)
# Appendix page 23
#
[icat]
use membrane.V
Ttypescale = 7.5614e-3 [L/F/s]: fraction of Pscale that is Ttype
    in [L/F/s]
dot(n) = (inf - n) / tau
    inf = 1 / (1 + exp(-(V + 48.4 [mV]) / 5.2 [mV]))
    tau = if(V < -56 [mV],
             2.44 [ms] * exp((V + 120 [mV]) / 40 [mV]),
             1.34 [ms] + 0.035 [ms] * exp(-V / 11.8 [mV]))
        in [ms]
    desc: T-type calcium current gate
dot(l) = (inf - l) / tau
    inf = 1/(1+exp((V + 75.6 [mV]) / 6.2 [mV]))
    tau = if(V < -60 [mV],
             500 [ms],
             18.3 [ms] + 0.005 [ms] * exp(-V / 6.2 [mV]))
        in [ms]
    desc: T-type calcium current gate
I = ical.ICamax / ical.PCa * Ttypescale * n * n * l
    desc: T-type channel Ca++ current
    in [A/F]

#
# Ito1 current, Kv4.3
# Appendix page 13
#
[ito]
use membrane.V
# Rate scaling factors
f1 = 1.8936
f2 = 14.224647456
f3 = 158.574378389
f4 = 142.936645351
b1 = 6.77348
b2 = 15.6212705152
b3 = 28.7532603313
b4 = 524.576206679
# Voltage dependent rate parameters
alphaa0 = 0.543708 [1/ms]
    in [1/ms]
aa = 0.028983 [1/mV]
    in [1/mV]
betaa0 = 0.080185 [1/ms]
    in [1/ms]
ba = 0.0468437 [1/mV]
    in [1/mV]
alphai0 = 0.0498424 [1/ms]
    in [1/ms]
ai = 0.000373016 [1/mV]
    in [1/mV]
betai0 = 0.000819482 [1/ms]
    in [1/ms]
bi = 0.00000005374 [1/mV]
    in [1/mV]
alpha_act43 = alphaa0 * exp(aa * V)
    in [1/ms]
beta_act43 = betaa0 * exp(-ba * V)
    in [1/ms]
alpha_inact43 = alphai0 * exp( - ai * V)
    in [1/ms]
beta_inact43 = betai0 * exp(bi * V)
    in [1/ms]
C0_to_C1 = 4*alpha_act43
    in [1/ms]
C1_to_C2 = 3*alpha_act43
    in [1/ms]
C2_to_C3 = 2 * alpha_act43
    in [1/ms]
C3_to_O =   alpha_act43
    in [1/ms]
CI0_to_CI1 = 4*b1*alpha_act43
    in [1/ms]
CI1_to_CI2 = 3*b2*alpha_act43/b1
    in [1/ms]
CI2_to_CI3 = 2 * b3*alpha_act43/b2
    in [1/ms]
CI3_to_OI =   b4*alpha_act43/b3
    in [1/ms]
C1_to_C0 =   beta_act43
    in [1/ms]
C2_to_C1 = 2 * beta_act43
    in [1/ms]
C3_to_C2 = 3*beta_act43
    in [1/ms]
O_to_C3 = 4*beta_act43
    in [1/ms]
CI1_to_CI0 =          beta_act43/f1
    in [1/ms]
CI2_to_CI1 = 2 * f1*beta_act43/f2
    in [1/ms]
CI3_to_CI2 = 3*f2*beta_act43/f3
    in [1/ms]
OI_to_CI3 = 4*f3*beta_act43/f4
    in [1/ms]
C0_to_CI0 = beta_inact43
    in [1/ms]
C1_to_CI1 = f1*beta_inact43
    in [1/ms]
C2_to_CI2 = f2*beta_inact43
    in [1/ms]
C3_to_CI3 = f3*beta_inact43
    in [1/ms]
O_to_OI = f4*beta_inact43
    in [1/ms]
CI0_to_C0 = alpha_inact43
    in [1/ms]
CI1_to_C1 = alpha_inact43/b1
    in [1/ms]
CI2_to_C2 = alpha_inact43/b2
    in [1/ms]
CI3_to_C3 = alpha_inact43/b3
    in [1/ms]
OI_to_O = alpha_inact43/b4
    in [1/ms]
dot(C0) = a2 - a1
    a1 = (C0_to_C1+C0_to_CI0) * C0
        in [1/ms]
    a2 = C1_to_C0*C1 + CI0_to_C0*CI0
        in [1/ms]
dot(C1) = a2 - a1
    a1 = (C1_to_C2+C1_to_C0+C1_to_CI1) * C1
        in [1/ms]
    a2 = C2_to_C1*C2 + CI1_to_C1*CI1 + C0_to_C1*C0
        in [1/ms]
dot(C2) = a2 - a1
    a1 = (C2_to_C3+C2_to_C1+C2_to_CI2) * C2
        in [1/ms]
    a2 = C3_to_C2*C3 + CI2_to_C2*CI2 + C1_to_C2*C1
        in [1/ms]
dot(C3) = a2 - a1
    a1 = (C3_to_O+C3_to_C2+C3_to_CI3) * C3
        in [1/ms]
    a2 = O_to_C3*O + CI3_to_C3*CI3 + C2_to_C3*C2
        in [1/ms]
dot(O) = a2 - a1
    a1 = (O_to_C3+O_to_OI) * O
        in [1/ms]
    a2 = C3_to_O*C3 + OI_to_O*OI
        in [1/ms]
dot(CI0) = a2 - a1
    a1 = (CI0_to_C0+CI0_to_CI1) * CI0
        in [1/ms]
    a2 = C0_to_CI0*C0 + CI1_to_CI0*CI1
        in [1/ms]
dot(CI1) = a2 - a1
    a1 = (CI1_to_CI2+CI1_to_C1+CI1_to_CI0) * CI1
        in [1/ms]
    a2 = CI2_to_CI1*CI2 + C1_to_CI1*C1 + CI0_to_CI1*CI0
        in [1/ms]
dot(CI2) = a2 - a1
    a1 = (CI2_to_CI3+CI2_to_C2+CI2_to_CI1) * CI2
        in [1/ms]
    a2 = CI3_to_CI2*CI3 + C2_to_CI2*C2 + CI1_to_CI2*CI1
        in [1/ms]
dot(CI3) = a2 - a1
    a1 = (CI3_to_OI+CI3_to_C3+CI3_to_CI2) * CI3
        in [1/ms]
    a2 = OI_to_CI3*OI + C3_to_CI3*C3 + CI2_to_CI3*CI2
        in [1/ms]
dot(OI) = a2 - a1
    a1 = (OI_to_O+OI_to_CI3) * OI
        in [1/ms]
    a2 = O_to_OI*O + CI3_to_OI*CI3
        in [1/ms]
G = 0.15213816 [mS/uF] : Maximum conductance of Kv4.3 channel
    in [mS/uF]
Ito1 = G * O * (V - nernst.EK)
    desc: Transient outward K+ current
    in [A/F]

#
# Sodium-Potassium pump current (INaK)
# Appendix page 16
#
[inak]
use phys.VFRT
use extra.Ko, extra.Nao, sodium.Nai
KmNai = 20 [mM] : Na+ half sat. constant for Na+/K+ pump
    in [mM]
KmKo = 1.5 [mM] : K+ half sat. constant for Na+/K+ pump
    in [mM]
fNaK = 1 / (a1 + a2)
    a1 = 1 + 0.1245 * exp(-0.1 * VFRT)
    a2 = 0.0365 * sigma * exp(-1.33 * VFRT)
        sigma = (exp(Nao / 67.3 [mM]) - 1) / 7
INaKmax = 1.5 [A/F] : maximum Na+/K+ pump current
    in [A/F]
INaK = INaKmax * fNaK * (a1 / a2)
    a1 = Ko / (Ko + KmKo)
    a2 = 1 + (KmNai / Nai)^1.5
    desc: Na+/K+ pump current
    in [A/F]

#
# Sodium-Calcium exchange current (INaCa)
# Appendix page 16
#
[inaca]
use phys.VFRT
use extra.Cao, calcium.Cai
use extra.Nao, sodium.Nai
nao3 = Nao ^ 3
    in [mM^3]
a1 = exp(eta * VFRT) * Nai^3 * Cao
    in [mM^4]
a2 = exp((eta - 1) * VFRT) * nao3 * Cai
    in [mM^4]
a3 = 1.0 + ksat * exp((eta - 1) * VFRT)
a4 = KmCa + Cao
    in [mM]
a5 = 5000 / (KmNa^3 + nao3)
    in [1/mM^3]
eta = 0.35 : controls voltage dependence of Na+/Ca++ exch.
ksat = 0.2 : Na+/Ca++ exch. sat. factor at negative potentials
KmNa = 87.5 [mM] : Na+  half sat. constant for Na+/Ca++ exch.
    in [mM]
KmCa = 1.38 [mM] : Ca++ half sat. constant for Na+/Ca++ exch.
    in [mM]
kNaCa = 0.44 [A/F] : scaling factor of Na+/Ca++ exchange (uA/uF)
    in [A/F]
INaCa = kNaCa * a5 * (a1 - a2) / (a4 * a3)
    in [A/F]

#
# Sarcolemmal Ca pump
# Appendix page 18
#
[ipca]
use calcium.Cai
IpCamax = 0.05 [A/F] : maximum sarcolemmal Ca++ pump current
    in [A/F]
KmpCa = 0.0005 [mM] : half sat. constant for sarcolemmal Ca++ pump
    in [mM]
IpCa = IpCamax * Cai / (KmpCa + Cai)
    in [A/F]

#
# Sustained component of transient outward current (Isus)
# Appendix page 14
#
[isus]
use membrane.V
Isusmax = 0.0919908 [mS/uF]
    in [mS/uF]
Isus = Isusmax * (1 / (1 + exp(-(V - 20 [mV]) / 12 [mV]))) * (V - nernst.EK)
    desc: new sustained outward current, TEA sensitive
    in [A/F]

#
# Inward rectifying current (IK1)
# Appendix page 16
#
[ik1]
use membrane.V
GK1 = 0.0226 [mS/uF] : peak IK1  conductance
    in [mS/uF]
IK1 = GK1 * sqrt(extra.Ko * 1 [1/mM]) * inf * (V - nernst.EK)
    inf = 1 / (0.9681 + exp((V + 82.18623 [mV]) / 15.88642 [mV]))
    desc: time independent K+ current
    in [A/F]

#
# Intracellular Sodium
# Appendix page 24
#
[sodium]
use cell.a1, cell.a2
INa_tot = nav15.INa + nav11.INa1 + ihcn.IHCN / 3 + 3*(inaca.INaCa + inak.INaK)
    in [A/F]
dot(Nai) = - a1 * INa_tot
    desc: intracellular Na+ conc
    in [mM]

#
# Intracellular Potassium
# Appendix page 24
#
[potassium]
use cell.a1, cell.a2
IK_tot = (ikr.IKr + iks.IKs + ik1.IK1 + ical.ICaK + (2 * ihcn.IHCN / 3)
          + isus.Isus + stimulus.i_stim - 2 * inak.INaK + ito.Ito1)
    in [A/F]
dot(Ki) = - a1 * IK_tot
    desc: intracellular K+ concentration
    in [mM]

#
# Ryanodyne Receptor current
# Appendix page 18
#
[ryr]
use calcium.CaSS, calcium.CaJSR
dot(C1) = -kaplus * a2 * C1 + kaminus * O1
    a2 = (CaSS * 1000 [uM/mM])^4
        in [uM^4]
    kaplus = 0.01215 [1/uM^4/ms] : RyR PC1 > PO1 rate constant
        in [1/uM^4/ms]
    kaminus = 0.576 [1/ms] : RyR PO1 > PC1 rate constant
        in [1/ms]
    desc: RyR channel state C1
dot(O2) =  kbplus * a1 * O1 - kbminus * O2
    a1 = (CaSS * 1000 [uM/mM])^3
        in [uM^3]
    kbplus = 0.00405 [1/uM^3/ms] : RyR PO1 > PO2 rate constant
        in [1/uM^3/ms]
    kbminus = 1.930 [1/ms] : RyR PO2 > PO1 rate constant
        in [1/ms]
    desc: RyR channel state O2
dot(C2) = kcplus * O1 - kcminus * C2
    kcplus = 0.1 [1/ms] : RyR PO1 > PC2 rate constant (1/ms)
        in [1/ms]
    kcminus = 0.0008 [1/ms] : RyR PC2 > PO1 rate constant (1/ms)
        in [1/ms]
    desc: RyR channel state C2
dot(O1) = -(dot(C1) + dot(O2) + dot(C2))
    desc: RyR channel state O1
Jrel = v1 * (O1 + O2) * (CaJSR - CaSS)
    v1 = 1.8 [1/ms] : max RyR channel Ca++ flux
        in [1/ms]
    desc: JSR Ca++ release flux
    in [mM/ms]

#
# SERCA2a Pump
# Appendix page 19
#
[serca]
fb = (calcium.Cai / Kfb) ^ Nfb
rb = (calcium.CaNSR / Krb) ^ Nrb
Kfb = 0.000168 [mM] : foward half sat. constant for Ca++ ATPase
    in [mM]
Krb = 3.29 [mM] : backward half sat. constant for Ca++ ATPase
    in [mM]
KSR = 1.2 : scaling factor for Ca++ ATPase
Nfb = 1.2 : foward cooperativity constant for Ca++ ATPase
Nrb = 1.0 : backward cooperativity constant for Ca++ ATPase
vmaxf = 0.0748e-3 [mM/ms] : Ca++ ATPase forward rate parameter
    in [mM/ms]
vmaxr = 0.318e-3  [mM/ms] : Ca++ ATPase backward rate parameter
    in [mM/ms]
Jup =  KSR * (vmaxf * fb - vmaxr * rb) / (1 + fb + rb)
    desc: SERCA pump flux
    in [mM/ms]

#
# Intracellular calcium fluxes
# Appendix page 19
#
[caflux]
use calcium.Cai, calcium.CaNSR, calcium.CaJSR, calcium.CaSS
Jtr = (CaNSR - CaJSR) / tautr
    tautr = 0.5747 [ms] : time constant for transfer from NSR to JSR
        in [ms]
    desc: Ca++ flux from NSR to JSR
    in [mM/ms]
Jxfer = (CaSS - Cai) / tauxfer
    tauxfer = 26.7 [ms] : time constant for transfer from SS to myoplasm
        in [ms]
    desc: Ca++ flux from SS to myoplasm
    in [mM/ms]
# Troponin sites and buffers
dot(LTRPNCa) = kltrpn_plus * Cai * (1 - LTRPNCa) - a1
    a1 = kltrpn_minus * LTRPNCa
        in [1/ms]
    kltrpn_minus = 40e-3 [1/ms] : Ca++ off rate for troponin low affinity sites
        in [1/ms]
    kltrpn_plus = 40 [1/mM/ms] : Ca++ on rate for troponin low affinity sites
        in [1/mM/ms]
    desc: fraction Ca++ bound low affinity troponin sites
dot(HTRPNCa) = khtrpn_plus*Cai*(1 - HTRPNCa) - a1
    a1 = khtrpn_minus * HTRPNCa
        in [1/ms]
    khtrpn_minus = 0.066e-3 [1/ms] : Ca++ off rate for troponin high affinity sites
        in [1/ms]
    khtrpn_plus = 20 [1/mM/ms] : Ca++ on rate for troponin high affinity sites
        in [1/mM/ms]
    desc: fraction Ca++ bound high affinity troponin sites
Jtrpn = LTRPNtot * dot(LTRPNCa) + HTRPNtot * dot(HTRPNCa)
    LTRPNtot = 70e-3 [mM] : total troponin low affinity site concentration
        in [mM]
    HTRPNtot = 140e-3 [mM] : total troponin high affinity site concentration
        in [mM]
    desc: troponin-Ca++ binding/unbinding flux
    in [mM/ms]

#
# Intracellular Calcium concentrations
# Appendix page 24
#
[calcium]
use cell.a1, cell.a2
use cell.Vmyo, cell.VSS, cell.VJSR, cell.VNSR
use serca.Jup, caflux.Jxfer, caflux.Jtr, caflux.Jtrpn
# Calmodulin
CMDNtot = 50e-3 [mM] : total myoplasmic calmodulin concentration
    in [mM]
EGTAtot = 0 [mM] : total myoplasmic EGTA concentration
    in [mM]
KmCMDN = 2.38e-3 [mM] : Ca++ half sat. constant for calmodulin
    in [mM]
KmEGTA = 1.5e-4 [mM] : Ca++ half sat. constant for EGTA
    in [mM]
beta_SS = 1/(1+b1+b2)
    b1 = CMDNtot*KmCMDN/((CaSS+KmCMDN)^2)
    b2 = EGTAtot*KmEGTA/((CaSS+KmEGTA)^2)
beta_JSR = 1/(1+b1)
    b1 = CSQNtot*KmCSQN/((CaJSR+KmCSQN)^2)
    CSQNtot = 15 [mM] : total NSR calsequestrin concentration
        in [mM]
    KmCSQN = 0.8 [mM] : Ca++ half sat. constant for calsequestrin
        in [mM]
beta_i = 1 / (1 + b1 + b2)
    b1 = CMDNtot * KmCMDN / (Cai + KmCMDN)^2
    b2 = EGTAtot * KmEGTA / (Cai + KmEGTA)^2
# Ion fluxes
dot(Cai) = beta_i * (Jxfer - Jup - Jtrpn - a3 * 0.5 * a1)
    a3 = -2 * inaca.INaCa + ipca.IpCa
        in [A/F]
    desc: intracellular Ca++ concentration
    in [mM]
#Cai = if(zCai < 1e-10, 1e-10, zCai)
dot(CaSS) = beta_SS * (a3 - ical.ICa * a2 - icat.I * a2)
    a3 = ryr.Jrel * VJSR / VSS - Jxfer * Vmyo / VSS
        in [mM/ms]
    desc: SS Ca++ concentration
    in [mM]
#CaSS = if(zCaSS < 1e-10, 1e-10, zCaSS)
dot(CaJSR) = beta_JSR * (Jtr - ryr.Jrel)
    desc: JSR Ca++ concentration
    in [mM]
dot(CaNSR) = Jup * Vmyo / VNSR - Jtr * VJSR / VNSR
    desc: NSR Ca++ concentration
    in [mM]

#
# Reversal potentials
# Listed per current in the appendix
#
[nernst]
ENa = phys.RTF * log(extra.Nao / sodium.Nai)
    desc: reversal potential for Na
    in [mV]
EK =  phys.RTF * log(extra.Ko / potassium.Ki)
    desc: reversal potential for K
    in [mV]

#
# Cell geometry
# Appendix page 1, table 2
#
[cell]
Acap = 3.912e-4 [cm^2]
    in [cm^2]
    desc: """
        Capacitive membrane area

        Note from original implementation:
        The assumption of 1uF/cm^2 holds for this model therefore Acap in cm^2
        is equal to whole cell capacitance in uF.
        """
Vmyo = 21.96e-6 [uL] : myoplasmic volume
    in [uL]
VJSR = 0.136e-6 [uL] : junctional SR volume
    in [uL]
VNSR = 1.785e-6 [uL] : network SR volume
    in [uL]
VSS = 1.08e-9  [uL] : subspace volume
    in [uL]
a1 = Acap / (Vmyo * phys.F * 1000 [cm^2/mF])
    in [M/s/A*F]
a2 = Acap / (2 * VSS * phys.F * 1000 [cm^2/mF])
    in [M/s/A*F]

#
# Extracellular concentrations
# Appendix page 1, table 3
#
[extra]
Ko = 4 [mM] : extracellular K+ concentration
    in [mM]
Nao = 138 [mM] : extracellular Na+  concentration
    in [mM]
Cao = 2 [mM] : extracellular Ca2+ concentration
    in [mM]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1        50       0.5      1000     0

[[script]]
import myokit
import matplotlib.pyplot as plt

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

print(m.format_state())

# Run simulation
bcl = 1000
d = s.run(5000)

# Show the membrane potential
plt.figure()
plt.plot(d['engine.time'], d['membrane.V'])
plt.show()

